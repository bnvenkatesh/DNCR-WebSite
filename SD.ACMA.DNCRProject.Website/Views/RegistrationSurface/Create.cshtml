@using SD.ACMA.DNCRProject.Website.Controllers
@using SD.ACMA.DNCRProject.Website.Extensions
@inherits Umbraco.Web.Mvc.UmbracoViewPage<SD.ACMA.DNCRProject.Website.Models.RegistrationViewModel>

@{
    this.MapModel();
}

<div class="contentHeadline">
    <div class="contentTitle red">
        <h1 class="ProxiSemiBold">@ViewBag.PageTitle</h1>
    </div>
</div>

@if (!Model.IsSubmitted)
{
    <script src='https://www.google.com/recaptcha/api.js'></script>
    <script>
        (function ($) {
            $.validator.setDefaults({
                ignore: ":hidden:not(#MinimumNumbers)"
            });
        }(jQuery));

        function handleFaxContact(isFaxNumber) {
            if (isFaxNumber) {
                $(".accordionContent input#ContactNumber").addClass("other-error");
                $(".accordionContent input#ContactNumber").siblings("span.faxContact").show();
            } else {
                $(".accordionContent input#ContactNumber.other-error").removeClass("other-error");
                $(".accordionContent input#ContactNumber").siblings("span.faxContact").hide();
            }
        }

        function showHideContact() {
            if ($(".accordionContent .phoneNumber input.faxes:checked").length > 0) {
                $(".accordionContent .contact").show();
                $(".accordionContent .phoneNumber input.faxes").each(function () {
                    if ($(this).is(":checked") && $(this).siblings("input.phoneInput").val().substr(0, 2) == "04") {
                        $(this).siblings("input.phoneInput").addClass("other-error");
                        $(this).siblings("span.mobileFax").css("display", "block");
                    } else {
                        $(this).siblings("span.mobileFax").hide();
                        $(this).siblings("input.phoneInput.other-error").removeClass("other-error");
                    }
                });
                var isFaxNumber = false;
                $(".accordionContent .phoneNumber input.faxes:checked").each(function () {
                    if ($(this).siblings("input.phoneInput").val() != "" && $(this).siblings("input.phoneInput").val() == $(".accordionContent input#ContactNumber").val()) {
                        isFaxNumber = true;
                    }
                });
                handleFaxContact(isFaxNumber);
            } else {
                $(".accordionContent .contact").hide();
                $("span.mobileFax").hide();
                $("input.phoneInput.other-error").removeClass("other-error");
            }
        }

        $(function () {
            //Registration - automatically enable/disable checkbox and show/hide contact
            $(".accordionContent").on("keyup change", ".phoneNumber input.phoneInput", function () {
                var type = $("input[name='RegisterType']:checked").attr("id");
                if (type !== "business") {
                    if ($(this).val() !== "") {
                        $(this).siblings("input.faxes").prop('disabled', false).removeClass("readonly");
                    } else {
                        $(this).siblings("input.faxes").prop('disabled', true).addClass("readonly").prop('checked', false);
                    }
                }
                showHideContact();
            });

            //Registration - automatically show/hide contact
            $(".accordionContent").on("change", ".phoneNumber input.faxes", function () {
                showHideContact();
            });

            $(".accordionContent").on("keyup change", "input#ContactNumber", function () {
                var isFaxNumber = false;
                $(".accordionContent .phoneNumber input.faxes:checked").each(function() {
                    if ($(this).siblings("input.phoneInput").val() != "" && $(this).siblings("input.phoneInput").val() == $(".accordionContent input#ContactNumber").val()) {
                        isFaxNumber = true;
                    }
                });
                handleFaxContact(isFaxNumber);
            });

            $("[data-register-type]").registertype();

            //Populate the confirm accordion
            $("button.populateConfirm").click(function (event) {
                event.preventDefault();
                var isValid = $(this).closest(".accordionContent").find("span.error.mobileFax:visible").length == 0 && $(this).closest(".accordionContent").find("span.error.faxContact:visible").length == 0;
                if ($(this).closest(".accordionContent").find("input, select, textarea").valid() && isValid) {
                    var organisationName = $(".accordionContent #OrganisationName").val();
                    var registerType = $("input[name='RegisterType']:checked").val();
                    if (registerType.indexOf("government") >= 0 || registerType.indexOf("business") >= 0) {
                        $(".accordionContent p.organisationName").text(organisationName).show();
                    } else $(".accordionContent p.organisationName").hide();
                    var name = $(".accordionContent #FirstName").val() + " " + $(".accordionContent #LastName").val();
                    $(".accordionContent p.confirmName").text(name);
                    var email = $(".accordionContent #Email").val();
                    $(".accordionContent p.confirmEmail").text("email: " + email);
                    var phone = $(".accordionContent #ContactNumber:visible").val();
                    if (phone == null) {
                        $(".accordionContent p.confirmPhone").hide();
                    } else {
                        $(".accordionContent p.confirmPhone").show();
                        $(".accordionContent p.confirmPhone").text("phone: " + phone);
                    }
                    var count = 0;
                    $(".accordionContent ul.numbers").html("");
                    $(".accordionContent input.phoneInput").each(function () {
                        if ($(this).val() !== "") {
                            count++;
                            $(".accordionContent ul.numbers").append("<li id='phone" + count + "'></li>");
                            $(".accordionContent ul.numbers li#phone" + count).text($(this).val());
                        }
                    });
                    openNextAccordion(this);
                }
                else invalidateAccordion(this);
            });

            $("button.checktype").click(function (event) {
                event.preventDefault();
                if ($(this).closest(".accordionContent").find("input, select, textarea").valid()) {
                    var type = $("input[name='RegisterType']:checked").attr("id");
                    if (type === "business") {
                        $("input.faxes").prop('checked', true).prop('disabled', true).addClass("readonly");
                        $("button.addMore.numbers").hide();
                        $("button.addMore.faxes").show();
                    } else {
                        $("input.faxes").prop('checked', false).prop('disabled', true).addClass("readonly");
                        $("button.addMore.numbers").show();
                        $("button.addMore.faxes").hide();
                        $(".accordionContent input.phoneInput").each(function() {
                            if ($(this).val() !== "") {
                                $(this).siblings("input.faxes").prop('disabled', false).removeClass("readonly");
                            }
                        });
                    }
                    showHideContact();
                    openNextAccordion(this);
                } else invalidateAccordion(this);
            });

            $(".accordionContent").on("change", ".phoneNumber input.phoneInput", function () {
                $("#MinimumNumbers-error").hide();
            });
            $(".accordionContent input.radioCheck").on("change", function () {
                if (this.checked)
                {
                    $(this).valid();
                }
            });
        });
    </script>
    <div class="form-holder floatLeft">
        <div class="formDesc">@ViewBag.PageSummary</div>
        <div class="formError">@ViewBag.ErrorMessage</div>
        @using (Html.BeginUmbracoForm<RegistrationSurfaceController>("Create"))
        {
            @Html.AntiForgeryToken()
            <ul id="formAccordion" class="accordion globalAccordion">
                <li>
                    <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
                        <span class="title">1. Start</span>
                        <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
                    </div>
                    <div class="accordionContent">
                        <div>
                            <p class="italic">All fields marked with * are mandatory</p>
                            <div class="errorContainer"></div>
                        </div>
                        <br />
                        <div class="labelDescMargin">
                            <p>To register a number you must be the account holder, a nominee, or be authorised to act for the account holder.</p>
                        </div>
                        <div class="formField fieldMargin">
                            <fieldset>
                                <legend>@Html.GetDisplayName(model => model.RegisterType)</legend>
                                <div class="labelDescMargin">
                                    @Html.RequiredTextFor(model => model.RegisterType, new { @class = "ProxiSemiBold inlineBlock" })
                                </div>
                                <div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.RegisterType, "my own number/s", new { @id = "own", @class = "radioCheck", data_register_type = "own", data_header_text = "Personal details" })
                                        @Html.Label("own", "my own number/s")
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.RegisterType, "family or friends' number/s", new { @id = "familyfriends", @class = "radioCheck", data_register_type = "familyfriends" })
                                        @Html.Label("familyfriends", "family or friends' number/s")
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.RegisterType, "government number/s", new { @id = "government", @class = "radioCheck", data_register_type = "government", data_header_text = "Organisation details" })
                                        @Html.Label("government", "government number/s")
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.RegisterType, "business fax number/s", new { @id = "business", @class = "radioCheck", data_register_type = "business", data_header_text = "Organisation details" })
                                        @Html.Label("business", "business fax number/s")
                                    </div>
                                    @Html.ValidationMessageFor(model => model.RegisterType, "", new { @class = "error" })
                                </div>
                            </fieldset>
                            <div class="clear"></div>
                        </div>
                        <div class="labelDescMargin">
                            <p>If you would like to register more than 20 numbers, please go to <a class="purple" href="@ViewBag.BulkRegisterUrl">Bulk Registration</a>.
                            </p>
                        </div>
                        <hr/>
                        <div>
                            <button class="ProxiBold purple next validate">NEXT</button>
                        </div>
                    </div>
                </li>
                <li class="own government business registertype">
                    <div class="accordionHeader ProxiBold">
                        <span class="title">2. Personal details</span>
                        <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
                    </div>
                    <div class="accordionContent">
                        <div>
                            <p class="italic">All fields marked with * are mandatory</p>
                            <div class="errorContainer"></div>
                        </div>
                        <br />
                        <div class="government business registertype labelDescMargin subHeader hidden">
                            <p>Organisation details</p>
                        </div>
                        <div class="government business registertype formField fieldMargin hidden">
                            <div class="floatLeft">
                                @Html.RequiredLabelFor(model => model.OrganisationName, new { @class = "inputLabel" })
                            </div>
                            <div class="floatLeft">
                                @Html.TextBoxFor(model => model.OrganisationName, new { @class = "long government business registertype deny-html" })
                                @Html.ValidationMessageFor(model => model.OrganisationName, "", new {@class = "error"})
                            </div>
                            <div class="clear"></div>
                        </div>
                        <hr class="government business registertype hidden"/>
                        <fieldset>
                            <legend>Account holder details</legend>
                            <div class="own registertype labelDescMargin subHeader">
                                <p>Account holder details</p>
                            </div>
                            <div class="government business registertype fieldMargin subHeader hidden">
                                <p>Authorised officer details</p>
                            </div>
                            <div class="formField fieldMargin">
                                <div class="floatLeft">
                                    @Html.RequiredLabelFor(model => model.FirstName, new { @class = "inputLabel" })
                                </div>
                                <div class="floatLeft">
                                    @Html.TextBoxFor(model => model.FirstName, new { @class = "long deny-html" })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new {@class = "error"})
                                </div>
                                <div class="clear"></div>
                            </div>
                            <div class="formField fieldMargin">
                                <div class="floatLeft">
                                    @Html.RequiredLabelFor(model => model.LastName, new { @class = "inputLabel" })
                                </div>
                                <div class="floatLeft">
                                    @Html.TextBoxFor(model => model.LastName, new { @class = "long deny-html" })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new {@class = "error"})
                                </div>
                                <div class="clear"></div>
                            </div>
                        </fieldset>
                        <hr/>
                        <fieldset>
                            <legend>Your email address</legend>
                            <div class="fieldMargin subHeader">
                                <p>Your email address</p>
                            </div>
                            <div class="formField fieldMargin">
                                <div class="floatLeft">
                                    @Html.RequiredLabelFor(model => model.Email, new { @class = "inputLabel" })
                                </div>
                                <div class="floatLeft">
                                    @Html.TextBoxFor(model => model.Email, new { @class = "long deny-html", @type = "email" })
                                    @Html.ValidationMessageFor(model => model.Email, "", new {@class = "error"})
                                </div>
                                <div class="clear"></div>
                            </div>
                            <div class="formField fieldMargin">
                                <div class="floatLeft">
                                    @Html.RequiredLabelFor(model => model.ConfirmEmail, new { @class = "inputLabel" })
                                </div>
                                <div class="floatLeft">
                                    @Html.TextBoxFor(model => model.ConfirmEmail, new { @class = "long deny-html", @type = "email" })
                                    @Html.ValidationMessageFor(model => model.ConfirmEmail, "", new {@class = "error"})
                                </div>
                                <div class="clear"></div>
                            </div>
                        </fieldset>
                        <hr />
                        <div>
                            <button class="ProxiBold purple next validate checktype">NEXT</button>
                        </div>
                    </div>
                </li>
                <li class="own government business registertype">
                    <div class="accordionHeader ProxiBold">
                        <span class="title">3. Numbers to register</span>
                        <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
                    </div>
                    <div class="accordionContent">
                        <div>
                            <div class="errorContainer"></div>
                        </div>
                        <br />
                        @Html.HiddenFor(model => model.MinimumNumbers)
                        <div class="formField">
                            <p>Your number/s can be registered if they are used or maintained:</p>
                            <ul>
                                <li>primarily for domestic purposes, or</li>
                                <li>exclusively for transmitting or receiving faxes, or</li>
                                <li>exclusively for use by a government body.</li>
                            </ul>                           
                        </div>
                        <div class="labelDescMargin">
                            <p><span class="ProxiBold">Important</span>: Your number/s <span class="ProxiBold">cannot</span> be registered if they are used or maintained primarily for business purposes (unless they are fax numbers).</p>
                        </div>
                        <fieldset>
                            <legend>Numbers to register</legend>
                            <div class="fieldMargin subHeader">
                                <p>Numbers to register</p>
                            </div>
                            <div class="labelDescMargin">
                                <p>Please include the two-digit area code for home or fax numbers.</p>
                                <p>At least one number needs to be provided</p>
                            </div>
                            @{
                                int fieldCount = 5;
                                if (Model.Numbers != null && Model.Numbers.Count > 5)
                                {
                                    fieldCount = Model.Numbers.Count;
                                }
                                for (int i = 0; i < fieldCount; i++)
                                {
                                    <div class="formField fieldMargin phoneNumber">
                                        <div class="floatLeft">
                                            @*<label class="@(i == 0 ? "req inputLabel" : "inputLabel")">Phone @(i + 1)</label>*@
                                            <label class="inputLabel" for="@String.Format("Numbers_{0}__Number", i)">Phone @(i + 1)<span class='visuallyhidden'> Numbers must be 10 digits beginning with 0. Numbers starting with 18 must be 7 or 10 digits. Numbers starting with 13 must be 6, 8 or 10 digits. E.g. 0212345678 or 0412345678</span></label>
                                        </div>
                                        <div class="floatLeft">
                                            @Html.TextBoxFor(model => model.Numbers[i].Number, new {@class = "long phoneInput deny-html", @type = "tel"})
                                            @if (Model.Numbers == null || String.IsNullOrEmpty(Model.Numbers[i].Number))
                                            {
                                                @Html.CheckBoxFor(model => model.Numbers[i].IsFax, new {@class = "faxes readonly", disabled = "true"})
                                            }
                                            else
                                            {
                                                @Html.CheckBoxFor(model => model.Numbers[i].IsFax, new {@class = "faxes"})
                                            }
                                            <label for="@String.Format("Numbers_{0}__IsFax", i)">Used for faxes</label>
                                            @Html.ValidationMessageFor(model => model.Numbers[i].Number, "", new {@class = "error numberError"})
                                            @if (i == 0)
                                            {
                                                @Html.ValidationMessageFor(model => model.Numbers, "", new {@class = "error"})
                                                @Html.ValidationMessageFor(model => model.MinimumNumbers, "", new {@class = "error"})
                                            }
                                            <span class="error numberError mobileFax hidden"><span>Mobile numbers cannot be registered as fax numbers. Please enter a fixed line number or uncheck the "Used for faxes" checkbox.</span></span>
                                        </div>
                                        <div class="clear"></div>
                                    </div>
                                }
                                if (Model.Numbers == null || Model.Numbers.Count < 20)
                                {
                                    <div class="hideDisabled">
                                        <button type="button" class="addMore numbers" data-add-more-numbers="5" data-add-faxes="true" data-check-faxes="false">Add more numbers</button>
                                        <button type="button" class="addMore faxes hidden" data-add-more-numbers="5" data-add-faxes="true" data-check-faxes="true">Add more numbers</button>
                                    </div>
                                }
}
                            @{
                                var hideContact = "contact hidden";
                                if (Model.Numbers != null && Model.Numbers.Any())
                                {
                                    foreach (var number in Model.Numbers)
                                    {
                                        if (number.IsFax)
                                        {
                                            hideContact = "contact";
                                            break;
                                        }
                                    }
                                }
                            }
                            <div class="formField fieldMargin groupField">
                                @Html.CheckBoxFor(model => model.NotABusinessNumberAcceptTerms, new { @class = "radioCheck" })
                                @Html.RequiredLabelFor(model => model.NotABusinessNumberAcceptTerms, new { @class = "ProxiSemiBold radioCheckLabel" })
                                @Html.ValidationMessageFor(model => model.NotABusinessNumberAcceptTerms, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        
                            <div class="@hideContact">
                                <hr />
                                <div class="subHeader">
                                    <p>Contact number</p>
                                </div>
                                <div class="labelDescMargin">
                                    <p>If you are registering a Fax number, please provide a phone number on which you can be contacted:</p>
                                </div>
                                <div class="formField fieldMargin">
                                    <div class="floatLeft">
                                        @Html.RequiredLabelFor(model => model.ContactNumber, new { @class = "inputLabel" })
                                    </div>
                                    <div class="floatLeft">
                                        @Html.TextBoxFor(model => model.ContactNumber, new { @class = "long deny-html", @type = "tel" })
                                        @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "error numberError" })
                                        <span class="error faxContact hidden"><span>The number cannot be a fax number.</span></span>
                                    </div>
                                    <div class="clear"></div>
                                </div>
                            </div>
                            <hr />
                            <div>
                                <button class="ProxiBold purple next populateConfirm">NEXT</button>
                            </div>
                        </div>
                </li>
                <li class="own government business registertype">
                    <div class="accordionHeader ProxiBold"><span class="title">4. Confirm and submit</span></div>
                    <div class="accordionContent">
                        <div>
                            <p class="italic">All fields marked with * are mandatory</p>
                            <div class="errorContainer"></div>
                        </div>
                        <br />
                        <div class="labelDescMargin subHeader">
                            <p>Account holder details</p>
                        </div>
                        <div class="labelDescMargin">
                            <p class="organisationName hidden"></p>
                            <p class="confirmName"></p>
                        </div>
                        <div class="subHeader">
                            <p>Contact details</p>
                        </div>
                        <div class="labelDescMargin">
                            <p class="confirmEmail"></p>
                            <p class="confirmPhone"></p>
                        </div>
                        <div class="subHeader">
                            <p>Numbers</p>
                        </div>
                        <div class="formField labelDescMargin">
                            <ul class="numbers"></ul>
                        </div>
                        <hr/>
                        <div class="subHeader">
                            <p>Statement by account holder</p>
                        </div>
                        <div class="groupField">
                            <div class="formField fieldMargin">
                                <div class="radio-holder">
                                    @Html.CheckBoxFor(model => model.AmtheAccountHolder, new { @class = "radioCheck" })
                                    @Html.RequiredLabelFor(model => model.AmtheAccountHolder, new { @class = "ProxiSemiBold radioCheckLabel" })
                                    @Html.ValidationMessageFor(model => model.AmtheAccountHolder, "", new { @class = "error" })
                                </div>
                            </div>
                            <div class="formField fieldMargin">
                                <p class="ProxiSemiBold and-or-margin">And</p>
                             </div>
                                <div class="formField fieldMargin checkboxgroupNumbers">

                                    <div class="radio-holder">
                                        
                                            @Html.CheckBoxFor(model => model.NumberDomesticAcceptTerms, new { @class = "check-one", Name = "HowNumberUsed" })                                       
                                            @Html.RequiredLabelFor(model => model.NumberDomesticAcceptTerms, new { @class = "ProxiSemiBold radioCheckLabel" })
                                            <a href="#" class="tooltip">
                                                <img src="/images/tooltip.png" alt="tip" />
                                                <span>

                                                    Numbers used primarily for business purposes are ineligible to be entered on the Do Not Call Register (unless registered as a fax number).
                                                </span>
                                            </a>
                                      
                                       
                                       
                                    </div>
                                    <div class="formField fieldMargin">
                                        <p class="ProxiSemiBold and-or-margin">Or</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.CheckBoxFor(model => model.NumberFaxAcceptTerms, new { @class = "check-one", Name = "HowNumberUsed" })
                                        @Html.RequiredLabelFor(model => model.NumberFaxAcceptTerms, new { @class = "ProxiSemiBold radioCheckLabel" })

                                    </div>
                                    <div class="formField fieldMargin">
                                        <p class="ProxiSemiBold and-or-margin">Or</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.CheckBoxFor(model => model.NumberGovtBodyAcceptTerms, new { @class = "check-one", Name = "HowNumberUsed" })
                                        @Html.RequiredLabelFor(model => model.NumberGovtBodyAcceptTerms, new { @class = "ProxiSemiBold radioCheckLabel" })
                                        @*<span for="HowNumberUsed" generated="true" class="hidden error check-box-error">Please confirm how the numbers are used</span>*@
                                        @Html.ValidationMessage("HowNumberUsed", new { @class = "error" })

                                    </div>
                                </div>
                            <div class="formField fieldMargin">
                                <p class="ProxiSemiBold and-or-margin">And</p>
                            </div>

                                <div class="formField fieldMargin">
                                    <div class="radio-holder">
                                        @Html.CheckBoxFor(model => model.AcceptTerms, new { @class = "radioCheck" })
                                        @Html.RequiredLabelFor(model => model.AcceptTerms, new { @class = "ProxiSemiBold radioCheckLabel" })
                                        @Html.ValidationMessageFor(model => model.AcceptTerms, "", new { @class = "error" })
                                    </div>
                                </div>
                            </div>
                                @if (ViewBag.Recaptcha)
                                {
                                    <hr />
                                    <div class="subHeader">
                                        <p>Security code</p>
                                    </div>
                                    <div class="labelDescMargin toolTipContainer">
                                        <p>
                                            This helps with the security of the register.<a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>Security requirements ensure the site is not being accessed by non-humans.</span></a>
                                        </p>
                                    </div>
                                    <div class="g-recaptcha" data-sitekey="@ViewBag.Sitekey" data-callback="recaptchaVerified"></div>
                                    <span class="error recaptchaerror hidden">Please verify that you are not a robot</span>
                                }
                                else
                                {
                                    <label for="alternative-email" class="alternative-email">Alternative Email</label>
                                    @Html.TextBox("alternative-email", "Security check, do not replace this value", new { @class = "alternative-email" })
                                }
                                <hr />
                                <div class="note">
                                    <p>
                                        The Privacy Act 1988 (Cth) imposes obligations on the ACMA and the register operator in relation to the collection, security, quality, access, use and disclosure of personal information. These obligations are detailed in the <a class="purple" href="@ViewBag.AustralianPrivacyUrl" target="_blank">Australian Privacy Principles</a>. For more information about the collection of data in this form, please see the Do Not Call Register <a class="purple" href="@ViewBag.DataCollectionNode" target="_blank">data collection notice</a>.
                                    </p>
                                </div>
                                <div>
                                    <button class="ProxiBold submit checkRecaptcha">SUBMIT REGISTRATION</button>
                                </div>
                            </div>
</li>
                <li class="familyfriends registertype hidden">
                    <div class="accordionHeader ProxiBold">
                        <span class="title">2. Nominee details</span>
                    </div>
                    <div class="accordionContent">
                        <div class="formField">
                            <p>
                                You may apply to register numbers as a <strong>nominee acting on behalf of another individual</strong>.
                            </p>
                            <p>
                                To do this, you will need to <a class="purple" href="@ViewBag.OfflineForm" target="_blank">download and complete the Registration Form (@ViewBag.OfflineFormFormat, @String.Format("{0}k", ViewBag.OfflineFormSize.ToString()))</a>.
                            </p>
                            <p>
                                You will need to <strong>provide evidence of your ability to act as a nominee</strong> for the account holder, such as:
                            </p>
                            <ul>
                                <li>the account holder’s signature on the form,</li>
                                <li>a letter from the account holder, or</li>
                                <li>a power of attorney.</li>
                            </ul>
                        </div>
                    </div>
                </li>
            </ul>
        }
    </div>
    <div class="sidebar floatLeft">
        @if (ViewBag.Faqs != "")
        {
            @Umbraco.RenderMacro("FAQs", new { Items = ViewBag.Faqs })
        }

        @if (ViewBag.Downloads != "")
        {
            @Umbraco.RenderMacro("Downloads", new { Items = ViewBag.Downloads })
        }

        @if (ViewBag.RelatedLinks != "")
        {
            @Umbraco.RenderMacro("RelatedLinks", new { Items = ViewBag.RelatedLinks })
        }
        <div class="clear"></div>
    </div>
}
else
{
    <div class="thankyou-message floatLeft">
        <h2 class="ProxiBold consumerGreenShade2Color">You're nearly finished...</h2>
        <p class="desc">Just one more step and you're done!</p>
        <p>You will receive an email with instructions and an activation link, please follow the instructions to complete the final step.</p>
    </div>
    <div class="sidebar floatLeft">
        @if (ViewBag.Faqs != "")
        {
            @Umbraco.RenderMacro("FAQs", new { Items = ViewBag.Faqs })
        }

        @if (ViewBag.Downloads != "")
        {
            @Umbraco.RenderMacro("Downloads", new { Items = ViewBag.Downloads })
        }

        @if (ViewBag.RelatedLinks != "")
        {
            @Umbraco.RenderMacro("RelatedLinks", new { Items = ViewBag.RelatedLinks })
        }
        <div class="clear"></div>
    </div>
}
