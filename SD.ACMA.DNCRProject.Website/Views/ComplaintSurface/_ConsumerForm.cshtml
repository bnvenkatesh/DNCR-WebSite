@using SD.ACMA.DNCRProject.Website.Controllers
@using SD.ACMA.DNCRProject.Website.Models
@using SD.ACMA.DNCRProject.Website.Helpers
@inherits Umbraco.Web.Mvc.UmbracoViewPage<SD.ACMA.DNCRProject.Website.Models.ConsumerComplaintViewModel>

<script src="https://www.google.com/recaptcha/api.js"></script>
<script id="fax-incident-template" type="text/x-handlebars-template">
    <li class="incident faxIncident">
        <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
            <span class="title">3. Fax incident details</span>
            <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
        </div>
        <div class="accordionContent">
            <div>
                <p class="italic">All fields marked with * are mandatory</p>
                <div class="errorContainer"></div>
            </div>
            <br />
            <input type="hidden" name="FaxIncidents.Index" value="{{faxIncidentIndex}}">
            <!-- Fax Summary block starts -->
            <div class="subHeader">
                <p>Fax Summary</p>
            </div>
            <div class="formField fieldMargin">
                <div class="labelDescMargin">
                    <label for="FaxIncidents_{{faxIncidentIndex}}__FaxSummary" class="ProxiSemiBold">@Html.GetDisplayName(model => model.FaxIncidents[0].FaxSummary)</label>
                </div>
                <div>
                    <textarea name="FaxIncidents[{{faxIncidentIndex}}].FaxSummary" id="FaxIncidents_{{faxIncidentIndex}}__FaxSummary" class="faxSummaries readonly deny-html" data-val-length-max="4000" data-val-length="Fax Summary cannot be longer than 4000 characters" data-val="true" readonly></textarea>
                    <span data-valmsg-replace="true" data-valmsg-for="FaxIncidents[{{faxIncidentIndex}}].FaxSummary" class="field-validation-valid error"></span>
                </div>
                <div class="clear"></div>
            </div>
            <!-- Fax Summary block ends -->
            <div class="formField fieldMargin">
                <div class="floatLeft">
                    <label class="inputLabel dateLabel" for="FaxIncidents_{{faxIncidentIndex}}__DateOfFax">@Html.GetDisplayName(model => model.FaxIncidents[0].DateOfFax)</label>
                </div>
                <div class="floatLeft">
                    <input id="FaxIncidents_{{faxIncidentIndex}}__DateOfFax" class="short" type="date" name="FaxIncidents[{{faxIncidentIndex}}].DateOfFax" data-val-required="Please provide the time and date you received the fax" data-val="true">
                    <span class="error field-validation-valid" data-valmsg-replace="true" data-valmsg-for="FaxIncidents[{{faxIncidentIndex}}].DateOfFax"></span>
                </div>
                <div class="clear"></div>
            </div>
            <div class="formField fieldMargin">
                <div class="floatLeft">
                    <label class="inputLabel" for="FaxIncidents_{{faxIncidentIndex}}__TimeOfFax">@Html.GetDisplayName(model => model.FaxIncidents[0].TimeOfFax)</label>
                </div>
                <div class="floatLeft">
                    <div class="selectParent selectShort">
                        <select id="FaxIncidents_{{faxIncidentIndex}}__TimeOfFax" name="FaxIncidents[{{faxIncidentIndex}}].TimeOfFax" data-val-required="Please provide the time and date you received the fax" data-val="true">
                            <option value="">Select</option>
                            <option value="12:00 to 12:29">12:00 to 12:29</option>
                            <option value="12:30 to 12:59">12:30 to 12:59</option>
                            <option value="1:00 to 1:29">1:00 to 1:29</option>
                            <option value="1:30 to 1:59">1:30 to 1:59</option>
                            <option value="2:00 to 2:29">2:00 to 2:29</option>
                            <option value="2:30 to 2:59">2:30 to 2:59</option>
                            <option value="3:00 to 3:29">3:00 to 3:29</option>
                            <option value="3:30 to 3:59">3:30 to 3:59</option>
                            <option value="4:00 to 4:29">4:00 to 4:29</option>
                            <option value="4:30 to 4:59">4:30 to 4:59</option>
                            <option value="5:00 to 5:29">5:00 to 5:29</option>
                            <option value="5:30 to 5:59">5:30 to 5:59</option>
                            <option value="6:00 to 6:29">6:00 to 6:29</option>
                            <option value="6:30 to 6:59">6:30 to 6:59</option>
                            <option value="7:00 to 7:29">7:00 to 7:29</option>
                            <option value="7:30 to 7:59">7:30 to 7:59</option>
                            <option value="8:00 to 8:29">8:00 to 8:29</option>
                            <option value="8:30 to 8:59">8:30 to 8:59</option>
                            <option value="9:00 to 9:29">9:00 to 9:29</option>
                            <option value="9:30 to 9:59">9:30 to 9:59</option>
                            <option value="10:00 to 10:29">10:00 to 10:29</option>
                            <option value="10:30 to 10:59">10:30 to 10:59</option>
                            <option value="11:00 to 11:29">11:00 to 11:29</option>
                            <option value="11:30 to 11:59">11:30 to 11:59</option>
                        </select>
                    </div>
                    <span class="field-validation-valid error" data-valmsg-replace="true" data-valmsg-for="FaxIncidents[{{faxIncidentIndex}}].TimeOfFax"></span>
                    <fieldset>
                        <legend>Select AM or PM</legend>
                        <div class="floatLeft radioButton">
                            <input id="faxAM{{faxIncidentIndex}}" class="radioCheck" type="radio" value="AM" name="FaxIncidents[{{faxIncidentIndex}}].FaxAmPm" data-val-required="Please provide the time and date you received the fax" data-val="true">
                            <label for="faxAM{{faxIncidentIndex}}" class="radioCheckLabel">AM</label>
                        </div>
                        <div class="floatLeft radioButton">
                            <input id="faxPM{{faxIncidentIndex}}" class="radioCheck" type="radio" value="PM" name="FaxIncidents[{{faxIncidentIndex}}].FaxAmPm">
                            <label for="faxPM{{faxIncidentIndex}}" class="radioCheckLabel">PM</label>
                        </div>
                        <div class="clear"></div>
                        <span class="field-validation-valid error" data-valmsg-replace="true" data-valmsg-for="FaxIncidents[{{faxIncidentIndex}}].FaxAmPm"></span>
                    </fieldset>
                </div>
                <div class="clear"></div>
            </div>            
            <div class="formField fieldMargin">
                <div class="labelDescMargin">
                    <label class="ProxiSemiBold" for="FaxIncidents_{{faxIncidentIndex}}__FaxFileUpload">@Html.GetDisplayName(model => model.FaxIncidents[0].FaxFileUpload)</label>
                </div>
                <div>
                    <input id="FaxIncidents_{{faxIncidentIndex}}__FaxFileUpload" type="file" name="FaxIncidents[{{faxIncidentIndex}}].FaxFileUpload">
                    <span class="field-validation-valid error" data-valmsg-replace="true" data-valmsg-for="FaxIncidents[{{faxIncidentIndex}}].FaxFileUpload"></span>
                </div>
                <div class="clear"></div>
            </div>
            <div class="formField fieldMargin">
                <p>To consider your complaint we need a copy of the fax you received. A scanned copy of the fax can be attached above, or the fax can be:</p>
                <ul>
                    <li>emailed to <a class="consumerGreenColor" href="mailto:enquiries@donotcall.gov.au">enquiries@donotcall.gov.au</a></li>
                    <li>posted to PO Box 13206 Law Courts VIC 8010</li>
                    <li>faxed to 1300 793 514</li>
                </ul>
                <p>If you use one of these alternative methods, please include the reference number that you will receive when you have submitted your complaint.</p>
            </div>
            <div class="fieldMargin toolTipContainer hideDisabled">
                <button class="ProxiBold addFaxIncident">Add another incident</button>
                <a href="#" class="tooltip addFaxIncident"><img src="/images/tooltip.png" alt="tip" /><span>This will allow you to add another fax from the same business to the same receiving phone number. If you do not wish to add another fax, please hit next to continue with your complaint.</span></a>
                <button class="ProxiBold removeFaxIncident">Remove this incident</button>
            </div>
            <hr />
            <div>
                <button class="ProxiBold next validate populateFaxSummaries">NEXT</button>
                <p class="failedMandatory hideOnMobile hidden">You have failed to complete a mandatory field</p>
            </div>
        </div>
    </li>
</script>
<script id="call-incident-template" type="text/x-handlebars-template">
    <li class="incident callIncident">
        <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
            <span class="title">4. Call incident details</span>
            <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
        </div>
        <div class="accordionContent">
            <div>
                <p class="italic">All fields marked with * are mandatory</p>
                <div class="errorContainer"></div>
            </div>
            <br />
            <input type="hidden" name="CallIncidents.Index" value="{{callIncidentIndex}}">
            <input id="CallIncidents_{{callIncidentIndex}}__ComplainantNumber" name="CallIncidents[{{callIncidentIndex}}].ComplainantNumber" type="hidden" class="parentComplainantNumber">
            <!-- Call Summary block starts -->
            <div class="subHeader">
                <p>Call Summary</p>
            </div>
            <div class="formField fieldMargin">
                <div class="labelDescMargin">
                    <label for="CallIncidents_{{callIncidentIndex}}__CallSummary" class="ProxiSemiBold">@Html.GetDisplayName(model => model.CallIncidents[0].CallSummary)</label>
                </div>
                <div>
                    <textarea name="CallIncidents[{{callIncidentIndex}}].CallSummary" id="CallIncidents_{{callIncidentIndex}}__CallSummary" class="callSummaries readonly deny-html" data-val-length-max="4000" data-val-length="Call Summary cannot be longer than 4000 characters" data-val="true" readonly></textarea>
                    <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].CallSummary" class="field-validation-valid error"></span>
                </div>
                <div class="clear"></div>
            </div>
            <!-- Call Summary block ends -->
            <div class="formField fieldMargin">
                <div class="floatLeft">
                    <label for="CallIncidents_{{callIncidentIndex}}__DateOfCall" class="inputLabel dateLabel">@Html.GetDisplayName(model => model.CallIncidents[0].DateOfCall)</label>
                </div>
                <div class="floatLeft dateOfCall">
                    <input type="date" name="CallIncidents[{{callIncidentIndex}}].DateOfCall" id="CallIncidents_{{callIncidentIndex}}__DateOfCall" class="short" data-val-required="Please provide the time and date you received the call" data-val="true">
                    <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].DateOfCall" class="field-validation-valid error"></span>
                </div>
                <div class="clear"></div>
            </div>
            <div class="formField fieldMargin">
                <div class="floatLeft">
                    <label for="CallIncidents_{{callIncidentIndex}}__TimeOfCall" class="inputLabel">@Html.GetDisplayName(model => model.CallIncidents[0].TimeOfCall)</label>
                </div>
                <div class="floatLeft">
                    <div class="selectParent selectShort">
                        <select name="CallIncidents[{{callIncidentIndex}}].TimeOfCall" id="CallIncidents_{{callIncidentIndex}}__TimeOfCall" data-val-required="Please provide the time and date you received the call" data-val="true">
                            <option value="">Select</option>
                            <option value="12:00 to 12:29">12:00 to 12:29</option>
                            <option value="12:30 to 12:59">12:30 to 12:59</option>
                            <option value="1:00 to 1:29">1:00 to 1:29</option>
                            <option value="1:30 to 1:59">1:30 to 1:59</option>
                            <option value="2:00 to 2:29">2:00 to 2:29</option>
                            <option value="2:30 to 2:59">2:30 to 2:59</option>
                            <option value="3:00 to 3:29">3:00 to 3:29</option>
                            <option value="3:30 to 3:59">3:30 to 3:59</option>
                            <option value="4:00 to 4:29">4:00 to 4:29</option>
                            <option value="4:30 to 4:59">4:30 to 4:59</option>
                            <option value="5:00 to 5:29">5:00 to 5:29</option>
                            <option value="5:30 to 5:59">5:30 to 5:59</option>
                            <option value="6:00 to 6:29">6:00 to 6:29</option>
                            <option value="6:30 to 6:59">6:30 to 6:59</option>
                            <option value="7:00 to 7:29">7:00 to 7:29</option>
                            <option value="7:30 to 7:59">7:30 to 7:59</option>
                            <option value="8:00 to 8:29">8:00 to 8:29</option>
                            <option value="8:30 to 8:59">8:30 to 8:59</option>
                            <option value="9:00 to 9:29">9:00 to 9:29</option>
                            <option value="9:30 to 9:59">9:30 to 9:59</option>
                            <option value="10:00 to 10:29">10:00 to 10:29</option>
                            <option value="10:30 to 10:59">10:30 to 10:59</option>
                            <option value="11:00 to 11:29">11:00 to 11:29</option>
                            <option value="11:30 to 11:59">11:30 to 11:59</option>
                        </select>
                    </div>
                    <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].TimeOfCall" class="field-validation-valid error"></span>
                    <fieldset>
                        <legend>Select AM or PM</legend>
                        <div class="floatLeft radioButton">
                            <input type="radio" class="radioCheck" value="AM" name="CallIncidents[{{callIncidentIndex}}].CallAmPm" id="callAM{{callIncidentIndex}}" data-val-required="Please provide the time and date you received the call" data-val="true">
                            <label for="callAM{{callIncidentIndex}}" class="radioCheckLabel">AM</label>
                        </div>
                        <div class="floatLeft radioButton">
                            <input type="radio" class="radioCheck" value="PM" name="CallIncidents[{{callIncidentIndex}}].CallAmPm" id="callPM{{callIncidentIndex}}">
                            <label for="callPM{{callIncidentIndex}}" class="radioCheckLabel">PM</label>
                        </div>
                        <div class="clear"></div>
                        <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].CallAmPm" class="field-validation-valid error"></span>
                    </fieldset>
                </div>
                <div class="clear"></div>
            </div>
            <div class="formField fieldMargin">
                <div class="labelDescMargin">
                    <label for="CallIncidents_{{callIncidentIndex}}__CallFromNumber" class="ProxiSemiBold">@Html.GetDisplayName(model => model.CallIncidents[0].CallFromNumber)</label>
                </div>
                <div class="toolTipContainer">
                    <input name="CallIncidents[{{callIncidentIndex}}].CallFromNumber" id="CallIncidents_{{callIncidentIndex}}__CallFromNumber" class="long callFromNumber hasTooltip deny-html" type="tel" data-val-length-max="20" data-val-length="The phone number cannot be longer than 20 characters" data-val-valuenotequalto-otherpropertyname="ComplainantNumber" data-val-valuenotequalto="You already said this was the number you received the call on in Section 2." data-val="true">
                    <a href="#" class="tooltip afterField"><img src="/images/tooltip.png" alt="tip" /><span>This may be the number that displayed on your phone or the number that was provided to you during the call as the calling number</span></a>
                    <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].CallFromNumber" class="field-validation-valid error"></span>
                </div>
                <div class="clear"></div>
            </div>
            <div class="formField fieldMargin">
                <fieldset>
                    <legend>@Html.GetDisplayName(model => model.CallIncidents[0].CallDescription)</legend>
                    <div class="labelDescMargin">
                        <p class="ProxiSemiBold inlineBlock">@Html.GetDisplayName(model => model.CallIncidents[0].CallDescription)</p>
                    </div>
                    <div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="You had a conversation with a real person" name="CallIncidents[{{callIncidentIndex}}].CallDescription" id="conversation{{callIncidentIndex}}" data-val-required="Please identify the best description of the call" data-val="true">
                            <label for="conversation{{callIncidentIndex}}" class="radioCheckLabel">You had a conversation with a real person</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="The call was a recorded message or synthetic voice" name="CallIncidents[{{callIncidentIndex}}].CallDescription" id="recorded{{callIncidentIndex}}">
                            <label for="recorded{{callIncidentIndex}}" class="radioCheckLabel">The call was a recorded message or synthetic voice</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="The call went to the answering machine, and a message was left" name="CallIncidents[{{callIncidentIndex}}].CallDescription" id="answeringMachine{{callIncidentIndex}}">
                            <label for="answeringMachine{{callIncidentIndex}}" class="radioCheckLabel">The call went to the answering machine, and a message was left</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="Silence &ndash; when you took the call there was no response" name="CallIncidents[{{callIncidentIndex}}].CallDescription" id="silence{{callIncidentIndex}}">
                            <label for="silence{{callIncidentIndex}}" class="radioCheckLabel">Silence - when you took the call there was no response</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="You did not answer the call" name="CallIncidents[{{callIncidentIndex}}].CallDescription" id="didNotAnswer{{callIncidentIndex}}">
                            <label for="didNotAnswer{{callIncidentIndex}}" class="radioCheckLabel">You did not answer the call</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="Other" name="CallIncidents[{{callIncidentIndex}}].CallDescription" id="otherCallDescription{{callIncidentIndex}}" data-other-option-field="otherCallDescription">
                            <label for="otherCallDescription{{callIncidentIndex}}" class="radioCheckLabel">Other</label>
                        </div>
                        <div class="formField otherCallDescription hidden">
                            <div class="labelDescMargin">
                                <label for="CallIncidents_{{callIncidentIndex}}__OtherCallDescription" class="ProxiSemiBold">@Html.GetDisplayName(model => model.CallIncidents[0].OtherCallDescription)</label>
                            </div>
                            <div>
                                <textarea name="CallIncidents[{{callIncidentIndex}}].OtherCallDescription" id="CallIncidents_{{callIncidentIndex}}__OtherCallDescription" class="deny-html" data-val-length-max="400" data-val-length="Other cannot be longer than 400 characters" data-val="true"></textarea>
                                <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].OtherCallDescription" class="field-validation-valid error"></span>
                            </div>
                            <div class="clear"></div>
                        </div>
                        <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].CallDescription" class="field-validation-valid error"></span>
                    </div>
                </fieldset>
                <div class="clear"></div>
            </div>
            <div class="formField fieldMargin checkboxgroup{{callIncidentIndex}}">
                <input type="hidden" name="CallIncidents[{{callIncidentIndex}}].MinimumCallPurpose" id="CallIncidents_{{callIncidentIndex}}__MinimumCallPurpose" data-val-minimumelements-selector=".checkboxgroup{{callIncidentIndex}} input[type=checkbox]:checked" data-val-minimumelements-minimumelements="1" data-val-minimumelements="Please identify the purpose of the call" class="minimumCallPurpose" data-val="true">
                <div class="labelDescMargin">
                    <label class="ProxiSemiBold">How would you describe the purpose of the call (you may select multiple purposes)?*</label>
                </div>
                <div>
                    <fieldset>
                        <legend>How would you describe the purpose of the call (you may select multiple purposes)?</legend>
                        <div class="radio-holder">
                            <input name="CallIncidents[{{callIncidentIndex}}].CallPurposeAdvertise" value="true" type="checkbox" id="CallIncidents_{{callIncidentIndex}}__CallPurposeAdvertise" class="radioCheck required-checkbox callPurposeAdvertise" data-checkbox-subfield="isCallerGoods">
                            <label for="CallIncidents_{{callIncidentIndex}}__CallPurposeAdvertise" class="radioCheckLabel">@Html.GetDisplayName(model => model.CallIncidents[0].CallPurposeAdvertise)</label>
                        </div>
                        <div class="radio-holder subCheckbox isCallerGoods hidden">
                            <input name="CallIncidents[{{callIncidentIndex}}].CallPurposeCaller" value="true" type="checkbox" id="CallIncidents_{{callIncidentIndex}}__CallPurposeCaller" class="radioCheck required-checkbox">
                            <label for="CallIncidents_{{callIncidentIndex}}__CallPurposeCaller" class="radioCheckLabel">@Html.GetDisplayName(model => model.CallIncidents[0].CallPurposeCaller)</label>
                        </div>
                        <div class="radio-holder">
                            <input name="CallIncidents[{{callIncidentIndex}}].CallPurposeDonation" value="true" type="checkbox" id="CallIncidents_{{callIncidentIndex}}__CallPurposeDonation" class="radioCheck required-checkbox callPurposeDonation" data-checkbox-subfield="isPolitical">
                            <label for="CallIncidents_{{callIncidentIndex}}__CallPurposeDonation" class="radioCheckLabel">@Html.GetDisplayName(model => model.CallIncidents[0].CallPurposeDonation)</label>
                        </div>
                        <div class="radio-holder subCheckbox isPolitical hidden">
                            <input name="CallIncidents[{{callIncidentIndex}}].CallPurposeDonationForPolitics" value="true" type="checkbox" id="CallIncidents_{{callIncidentIndex}}__CallPurposeDonationForPolitics" class="radioCheck required-checkbox">
                            <label for="CallIncidents_{{callIncidentIndex}}__CallPurposeDonationForPolitics" class="radioCheckLabel">@Html.GetDisplayName(model => model.CallIncidents[0].CallPurposeDonationForPolitics)</label>
                        </div>
                        <div class="radio-holder">
                            <input name="CallIncidents[{{callIncidentIndex}}].CallPurposePoll" value="true" type="checkbox" id="CallIncidents_{{callIncidentIndex}}__CallPurposePoll" class="radioCheck required-checkbox callPurposePoll">
                            <label for="CallIncidents_{{callIncidentIndex}}__CallPurposePoll" class="radioCheckLabel">@Html.GetDisplayName(model => model.CallIncidents[0].CallPurposePoll)</label>
                        </div>
                        <div class="radio-holder">
                            <input name="CallIncidents[{{callIncidentIndex}}].CallPurposeElection" value="true" type="checkbox" id="CallIncidents_{{callIncidentIndex}}__CallPurposeElection" class="radioCheck required-checkbox callPurposeElection">
                            <label for="CallIncidents_{{callIncidentIndex}}__CallPurposeElection" class="radioCheckLabel">@Html.GetDisplayName(model => model.CallIncidents[0].CallPurposeElection)</label>
                        </div>
                        <div class="radio-holder">
                            <input name="CallIncidents[{{callIncidentIndex}}].CallPurposeScam" value="true" type="checkbox" id="CallIncidents_{{callIncidentIndex}}__CallPurposeScam" class="radioCheck required-checkbox">
                            <label for="CallIncidents_{{callIncidentIndex}}__CallPurposeScam" class="radioCheckLabel">@Html.GetDisplayName(model => model.CallIncidents[0].CallPurposeScam)</label>
                        </div>
                        <div class="radio-holder">
                            <input name="CallIncidents[{{callIncidentIndex}}].CallPurposeOther" value="true" type="checkbox" id="CallIncidents_{{callIncidentIndex}}__CallPurposeOther" class="radioCheck required-checkbox callPurposeOther" data-checkbox-subfield="otherPurpose">
                            <label for="CallIncidents_{{callIncidentIndex}}__CallPurposeOther" class="radioCheckLabel">@Html.GetDisplayName(model => model.CallIncidents[0].CallPurposeOther)</label>
                        </div>
                        <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].MinimumCallPurpose" class="field-validation-valid error"></span>
                        <div class="formField otherPurpose hidden">
                            <div class="labelDescMargin">
                                <label for="CallIncidents_{{callIncidentIndex}}__OtherPurpose" class="ProxiSemiBold">@Html.GetDisplayName(model => model.CallIncidents[0].OtherPurpose)</label>
                            </div>
                            <div>
                                <textarea name="CallIncidents[{{callIncidentIndex}}].OtherPurpose" id="CallIncidents_{{callIncidentIndex}}__OtherPurpose" class="callOtherPurpose deny-html" data-val-length-max="400" data-val-length="Other cannot be longer than 400 characters" data-val-required="Please describe the purpose of the call" data-val="true"></textarea>
                                <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].OtherPurpose" class="field-validation-valid error"></span>
                            </div>
                            <div class="clear"></div>
                        </div>
                    </fieldset>
                </div>
                <div class="clear"></div>
            </div>
            <hr/>
            <div class="fieldMargin">
                <p>The following questions are used to identify potential breaches of the Telemarketing and Research Industry Standard. The rules in the industry standard apply to all calls made by telemarketers regardless of whether the numbers being called are on the Do Not Call Register or not. If you just want to make a complaint about a call made to a number on the Do Not Call Register you can skip this section and move to the next step.</p>
            </div>
            <div class="formField fieldMargin">
                <fieldset>
                    <legend>@Html.GetDisplayName(model => model.CallIncidents[0].AskedCallEnded)</legend>
                    <div class="labelDescMargin">
                        <p class="ProxiSemiBold inlineBlock">@Html.GetDisplayName(model => model.CallIncidents[0].AskedCallEnded)</p>
                    </div>
                    <div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="True" name="CallIncidents[{{callIncidentIndex}}].AskedCallEnded" id="askedCallEnded{{callIncidentIndex}}" data-other-option-field="wasCallEnded">
                            <label for="askedCallEnded{{callIncidentIndex}}" class="radioCheckLabel">Yes</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="False" name="CallIncidents[{{callIncidentIndex}}].AskedCallEnded" id="notAskedCallEnded{{callIncidentIndex}}">
                            <label for="notAskedCallEnded{{callIncidentIndex}}" class="radioCheckLabel">No</label>
                        </div>
                        <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].AskedCallEnded" class="field-validation-valid error"></span>
                    </div>
                </fieldset>
                <div class="clear"></div>
            </div>
            <!-- New block starts -->
            <div class="formField fieldMargin  wasCallEnded hidden">
                <div class="labelDescMargin">
                    <label for="CallIncidents_{{callIncidentIndex}}__AnswerForCallTermination" class="ProxiSemiBold">@Html.GetDisplayName(model => model.CallIncidents[0].AnswerForCallTermination)</label>
                </div>
                <div>
                    <textarea name="CallIncidents[{{callIncidentIndex}}].AnswerForCallTermination" id="CallIncidents_{{callIncidentIndex}}__AnswerForCallTermination" class="deny-html" data-val-length-max="4000" data-val-length="Answer For Call Termination cannot be longer than 4000 characters" data-val="true"></textarea>
                    <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].AnswerForCallTermination" class="field-validation-valid error"></span>
                </div>
                <div class="clear"></div>                
            </div>
            <!-- New block ends -->
            <div class="formField fieldMargin wasCallEnded hidden">
                <fieldset>
                    <legend>@Html.GetDisplayName(model => model.CallIncidents[0].WasCallEnded)</legend>
                    <div class="labelDescMargin toolTipContainer">
                        <p class="ProxiSemiBold inlineBlock">@Html.GetDisplayName(model => model.CallIncidents[0].WasCallEnded)</p>
                        <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>While the caller may say goodbye or thank you for your time, they should not continue to 'market' any product, service, etc.</span></a>
                    </div>
                    <div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="True" name="CallIncidents[{{callIncidentIndex}}].WasCallEnded" id="callEnded{{callIncidentIndex}}">
                            <label for="callEnded{{callIncidentIndex}}" class="radioCheckLabel">Yes</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="False" name="CallIncidents[{{callIncidentIndex}}].WasCallEnded" id="callNotEnded{{callIncidentIndex}}">
                            <label for="callNotEnded{{callIncidentIndex}}" class="radioCheckLabel">No</label>
                        </div>
                        <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].WasCallEnded" class="field-validation-valid error"></span>
                    </div>
                </fieldset>
                <div class="clear"></div>
            </div>
            <div class="formField fieldMargin">
                <fieldset>
                    <legend>@Html.GetDisplayName(model => model.CallIncidents[0].HasCallerId)</legend>
                    <div class="labelDescMargin">
                        <p class="ProxiSemiBold inlineBlock">@Html.GetDisplayName(model => model.CallIncidents[0].HasCallerId)</p>
                    </div>
                    <div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="Phone does not display Caller ID" name="CallIncidents[{{callIncidentIndex}}].HasCallerId" id="phoneNotDisplay{{callIncidentIndex}}">
                            <label for="phoneNotDisplay{{callIncidentIndex}}" class="radioCheckLabel">Phone does not display Caller ID</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="Yes" name="CallIncidents[{{callIncidentIndex}}].HasCallerId" id="hasCallerId{{callIncidentIndex}}" data-other-option-field="callerIdDetails">
                            <label for="hasCallerId{{callIncidentIndex}}" class="radioCheckLabel">Yes</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="Yes, but did not write it down" name="CallIncidents[{{callIncidentIndex}}].HasCallerId" id="yesNotWritten{{callIncidentIndex}}">
                            <label for="yesNotWritten{{callIncidentIndex}}" class="radioCheckLabel">Yes, but did not write it down</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="No" name="CallIncidents[{{callIncidentIndex}}].HasCallerId" id="noCallerId{{callIncidentIndex}}">
                            <label for="noCallerId{{callIncidentIndex}}" class="radioCheckLabel">No</label>
                        </div>
                        <div class="radio-holder">
                            <input type="radio" class="radioCheck" value="Did not notice" name="CallIncidents[{{callIncidentIndex}}].HasCallerId" id="didNotNotice{{callIncidentIndex}}">
                            <label for="didNotNotice{{callIncidentIndex}}" class="radioCheckLabel">Did not notice</label>
                        </div>
                        <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].HasCallerId" class="field-validation-valid error"></span>
                    </div>
                </fieldset>
                <div class="clear"></div>
            </div>
            <div class="formField callerIdDetails hidden">
                <div class="fieldMargin">
                    <div class="labelDescMargin">
                        <label for="CallIncidents_{{callIncidentIndex}}__CallerIdNumber" class="ProxiSemiBold">@Html.GetDisplayName(model => model.CallIncidents[0].CallerIdNumber)</label>
                    </div>
                    <div>
                        <input type="text" value="" name="CallIncidents[{{callIncidentIndex}}].CallerIdNumber" id="CallIncidents_{{callIncidentIndex}}__CallerIdNumber" class="long floatLeft deny-html" data-val-length-max="50" data-val-length="The number or word displayed cannot be longer than 50 characters" data-val-valuenotequalto-otherpropertyname="ComplainantNumber" data-val-valuenotequalto="You already said this was the number you received the call on in Section 2." data-val="true">
                        <button class="ProxiBold asAbove floatLeft hideDisabled">As above</button>
                    </div>
                    <div class="clear"></div>
                    <div>
                        <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].CallerIdNumber" class="field-validation-valid error"></span>
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin">
                    <fieldset>
                        <legend>@Html.GetDisplayName(model => model.CallIncidents[0].CallerIdContactable)</legend>
                        <div class="labelDescMargin">
                            <p class="ProxiSemiBold inlineBlock">@Html.GetDisplayName(model => model.CallIncidents[0].CallerIdContactable)</p>
                        </div>
                        <div>
                            <div class="radio-holder">
                                <input type="radio" class="radioCheck" value="Didn't try" name="CallIncidents[{{callIncidentIndex}}].CallerIdContactable" id="notTry{{callIncidentIndex}}">
                                <label for="notTry{{callIncidentIndex}}" class="radioCheckLabel">I didn't try to contact the number displayed during the call</label>
                            </div>
                            <div class="radio-holder">
                                <input type="radio" class="radioCheck" value="Made contact" name="CallIncidents[{{callIncidentIndex}}].CallerIdContactable" id="madeContact{{callIncidentIndex}}">
                                <label for="madeContact{{callIncidentIndex}}" class="radioCheckLabel">I did, and the number connected to a person or recorded message that <u>did not</u> give me the name of the business that called</label>
                            </div>
                            <div class="radio-holder">
                                <input type="radio" class="radioCheck" value="Could not contact" name="CallIncidents[{{callIncidentIndex}}].CallerIdContactable" id="couldNotContact{{callIncidentIndex}}">
                                <label for="couldNotContact{{callIncidentIndex}}" class="radioCheckLabel">I did, and the number was not in service or disconnected <i>or was not answered</i></label>
                            </div>
                            <div class="radio-holder">
                                <input type="radio" class="radioCheck" value="Left a message" name="CallIncidents[{{callIncidentIndex}}].CallerIdContactable" id="leftAMessage{{callIncidentIndex}}">
                                <label for="leftAMessage{{callIncidentIndex}}" class="radioCheckLabel">I did, and the number connected to an unidentified voicemail or phone queue</label>
                            </div>
                            <div class="radio-holder">
                                <input type="radio" class="radioCheck" value="Got some information about the caller" name="CallIncidents[{{callIncidentIndex}}].CallerIdContactable" id="infoAboutCaller{{callIncidentIndex}}">
                                <label for="infoAboutCaller{{callIncidentIndex}}" class="radioCheckLabel">I did, and the number connected to a person or recorded message that gave me the name of the business that called</label>
                            </div>
                            <div class="radio-holder">
                                <input type="radio" class="radioCheck" value="Other" name="CallIncidents[{{callIncidentIndex}}].CallerIdContactable" id="callerIdContactableOther{{callIncidentIndex}}" data-other-option-field="callerIdContactableOther">
                                <label for="callerIdContactableOther{{callIncidentIndex}}" class="radioCheckLabel">Other</label>
                            </div>
                            <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].CallerIdContactable" class="field-validation-valid error"></span>
                            <div class="callerIdContactableOther hidden">
                                <div class="labelDescMargin">
                                    <label for="CallIncidents_{{callIncidentIndex}}__CallerIdContactableOther" class="ProxiSemiBold">@Html.GetDisplayName(model => model.CallIncidents[0].CallerIdContactableOther)</label>
                                </div>
                                <div>
                                    <textarea name="CallIncidents[{{callIncidentIndex}}].CallerIdContactableOther" id="CallIncidents_{{callIncidentIndex}}__CallerIdContactableOther" class="deny-html" data-val-length-max="400" data-val-length="Other cannot be longer than 400 characters" data-val="true"></textarea>
                                    <span data-valmsg-replace="true" data-valmsg-for="CallIncidents[{{callIncidentIndex}}].CallerIdContactableOther" class="field-validation-valid error"></span>
                                </div>
                                <div class="clear"></div>
                            </div>
                        </div>
                    </fieldset>
                    <div class="clear"></div>
                </div>
            </div>            
            <div class="fieldMargin toolTipContainer hideDisabled">
                <button class="ProxiBold addCallIncident">Add another incident</button>
                <a href="#" class="tooltip addCallIncident"><img src="/images/tooltip.png" alt="tip" /><span>This will allow you to add another call from the same business to the same receiving phone number. If you do not wish to add another call, please hit next to continue with your complaint.</span></a>
                <button class="ProxiBold removeCallIncident hidden">Remove this incident</button>
            </div>
            <hr />
            <div>
                <button class="ProxiBold next validate populateCallSummaries">NEXT</button>
                <p class="failedMandatory hideOnMobile hidden">You have failed to complete a mandatory field</p>
            </div>
        </div>
    </li>
</script>
<script>
    function renameFaxIncidents() {
        var index = 0;
        if ($(".accordion li.faxIncident").length === 1) {
            $(".accordion li.faxIncident").find(".accordionHeader span.title").text("3. Fax incident details");
        } else {
            $(".accordion li.faxIncident").each(function () {
                $(this).find(".accordionHeader span.title").text("3(" + String.fromCharCode(97 + index) + "). Fax incident details");
                index++;
            });
        }
    }

    function renameCallIncidents() {
        var index = 0;
        if ($(".accordion li.callIncident").length === 1) {
            $(".accordion li.callIncident").find(".accordionHeader span.title").text("4. Call incident details");
        } else {
            $(".accordion li.callIncident").each(function () {
                $(this).find(".accordionHeader span.title").text("4(" + String.fromCharCode(97 + index) + "). Call incident details");
                index++;
            });
        }
    }

    function replaceText(oldString, newString) {
        $(".textChange").html(function (i, text) {
            return text.replace(new RegExp(oldString, 'g'), newString);
        });
    }

    function replaceCallWithFax() {
        replaceText("call made", "fax sent");
        replaceText("calls", "faxes");
        replaceText("call", "fax");
        replaceText("Call", "Fax");
        $("#lblComplainantNumber").html("The number on which you received the fax<span class='visuallyhidden'> Numbers must be 10 digits beginning with 0. Numbers starting with 18 must be 7 or 10 digits. Numbers starting with 13 must be 6, 8 or 10 digits. E.g. 0212345678</span><abbr title='required'>*</abbr>");
        $("#receivingPhoneTooltipLink").hide();
        //$("#receivingPhoneTooltip").text("This should be the phone number that the faxer dialled to contact you. It must be an Australian phone number and may be different to your contact phone number.");
        $("#PhoneServiceProviderTooltip").html("This is the name of the business that bills you for the number that was faxed.");
    }

    function replaceFaxWithCall() {
        replaceText("fax sent", "call made");
        replaceText("faxes", "calls");
        replaceText("fax", "call");
        replaceText("Fax", "Call");
        $("#lblComplainantNumber").html("What is your phone number? That is, what number did you receive the call on<span class='visuallyhidden'> This should be the phone number that the caller dialled to contact you. Numbers must be 10 digits beginning with 0. Numbers starting with 18 must be 7 or 10 digits. Numbers starting with 13 must be 6, 8 or 10 digits. E.g. 0212345678 or 0412345678</span><abbr title='required'>*</abbr>");
        $("#receivingPhoneTooltipLink").show();
        $("#receivingPhoneTooltip").text("This should be the phone number that the caller dialled to contact you. It must be an Australian phone number, but may be a fixed line or mobile number and may be different to your contact phone number.");
        $("#PhoneServiceProviderTooltip").html("This is the name of the business that provides the phone service for the number that was called (if the call was received on your mobile phone number, you should select your mobile phone provider). This should be the business that sends you your phone bill.");
    }

    function goToCall(that) {
        $(that).closest(".accordionContent").find("button.redirect").removeClass("redirect").addClass("next");
        replaceFaxWithCall();
        var accordion = $(that).closest(".accordion");
        accordion.find("li.incident").show();
        accordion.find("li.incident").last().find(".accordionHeader span.title").text("5. Confirm and submit");
        accordion.find("li.faxIncident").hide();
        accordion.find("li.callOnly").show();
        accordion.find(".faxOnlyFields").hide();
        accordion.find(".callOnlyFields").show();
        $("#RedirectUrl").val("");
        $(".unusedMinimumCallPurpose").addClass("minimumCallPurpose").removeClass("unusedMinimumCallPurpose");
    }

    function goToFax(that) {
        $(that).closest(".accordionContent").find("button.redirect").removeClass("redirect").addClass("next");
        replaceCallWithFax();
        var accordion = $(that).closest(".accordion");
        accordion.find("li.incident").show();
        accordion.find("li.incident").last().find(".accordionHeader span.title").text("4. Confirm and submit");
        accordion.find("li.callIncident").hide();
        accordion.find("li.callOnly").hide();
        accordion.find(".faxOnlyFields").show();
        accordion.find(".callOnlyFields").hide();
        $("#RedirectUrl").val("");
        $(".minimumCallPurpose").addClass("unusedMinimumCallPurpose").removeClass("minimumCallPurpose");
    }

    function goToSpam(that) {
        $(that).closest(".accordionContent").find("button.next").removeClass("next").addClass("redirect");
        $("#RedirectUrl").val("http://www.acma.gov.au/Citizen/Phones/Mobile/Dealing-with-mobile-spam/spam-complaints-reports-and-enquiries");
        $(".minimumCallPurpose").addClass("unusedMinimumCallPurpose").removeClass("minimumCallPurpose");
    }

    function goToEnquiry(that) {
        $(that).closest(".accordionContent").find("button.next").removeClass("next").addClass("redirect");
        $("#RedirectUrl").val("@ViewBag.LodgeEnquiryUrl");
        $(".minimumCallPurpose").addClass("unusedMinimumCallPurpose").removeClass("minimumCallPurpose");
    }

    (function ($) {
        $.validator.setDefaults({
            ignore: ":hidden:not(.minimumCallPurpose)"
        });
    }(jQuery));

    $(function () {
        refreshState();
        $("select#Country").change(function () {
            refreshState();
        });
        bindHiddenState();

        hideDetails();
        $(".accordionContent input#IsAnonymous").on("change", function () {
            hideDetails();
        });

        $(".accordionContent .formField select#PhoneServiceProvider").change(function () {
            if ($(this).val() === "Other") {
                $(".otherPhoneProvider").show();
            } else {
                $(".otherPhoneProvider").hide();
            }
        });

        var callIncidentIndex = 0;
        var callIncidentSource = $("#call-incident-template").html();
        var callIncidentTemplate = Handlebars.compile(callIncidentSource);

        $(".accordion").on("click", ".accordionContent button.asAbove", function (event) {
            event.preventDefault();
            $(this).siblings("input").val($(this).closest(".accordionContent").find(".callFromNumber").val());
        });

        $(".accordion").on("click", ".accordionContent button.addCallIncident", function (event) {
            event.preventDefault();

            callIncidentIndex++;
            var context = { callIncidentIndex: callIncidentIndex };

            var accordion = $(this).closest(".accordion");
            accordion.find("li.callIncident button.next").text("GO TO NEXT INCIDENT").addClass("incident");
            accordion.find("li.callIncident").last().after(callIncidentTemplate(context));
            accordion.accordion("refresh");

            accordion.find(".accordionContent button.removeCallIncident").show();
            if (accordion.find("li.callIncident").length >= 5) {
                accordion.find(".accordionContent button.addCallIncident").hide();
                accordion.find(".accordionContent .tooltip.addCallIncident").hide();
            }

            applyDatePicker();
            $("[data-other-option-field]").otheroptionfield();
            $("[data-checkbox-subfield]").checkboxsubfield();
            renameCallIncidents();

            $(".accordionContent input").on("change", function () {
                $(this).valid();
            });

            var form = $(this).closest("form").removeData("validator").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            var id = $("input[name=CallType]:checked").attr("id");
            if (id === "promoting") {
                $(".callPurposeAdvertise").last().click();
            }
            else if (id === "donation") {
                $(".callPurposeDonation").last().click();
            }
            else if (id === "survey") {
                $(".callPurposePoll").last().click();
            }
            else if (id === "election") {
                $(".callPurposeElection").last().click();
            }
            else if (id === "otherCallType") {
                $(".callPurposeOther").last().click();
                $("textarea.callOtherPurpose").last().val($(".callOtherDescription textarea#CallOtherDescription").val());
            }
        });

        $(".accordion").on("click", ".accordionContent button.removeCallIncident", function (event) {
            event.preventDefault();
            var index;
            if ($(this).closest(".accordion li").prevAll("li.callIncident:visible").length > 0) {
                index = $(this).closest(".accordion li").prevAll("li:visible").first().find(".accordionHeader").index(".accordionHeader");
            } else {
                index = $(this).closest(".accordion li").find(".accordionHeader").index(".accordionHeader");
            }
            var accordion = $(this).closest(".accordion");
            $(this).closest(".accordion li.callIncident").remove();
            accordion.accordion("refresh");
            accordion.accordion({ active: index });

            accordion.find("li.callIncident").last().find("button.next.incident").text("NEXT").removeClass("incident");

            accordion.find(".accordionContent button.addCallIncident").show();
            accordion.find(".accordionContent .tooltip.addCallIncident").show();
            if (accordion.find("li.callIncident").length === 1) {
                accordion.find(".accordionContent button.removeCallIncident").hide();
            }

            renameCallIncidents();
        });

        var faxIncidentIndex = 0;
        var faxIncidentSource = $("#fax-incident-template").html();
        var faxIncidentTemplate = Handlebars.compile(faxIncidentSource);

        $(".accordion").on("click", ".accordionContent button.addFaxIncident", function (event) {
            event.preventDefault();

            faxIncidentIndex++;
            var context = { faxIncidentIndex: faxIncidentIndex };

            var accordion = $(this).closest(".accordion");
            accordion.find("li.faxIncident button.next").text("GO TO NEXT INCIDENT").addClass("incident");
            accordion.find("li.faxIncident").last().after(faxIncidentTemplate(context));
            accordion.accordion("refresh");

            accordion.find(".accordionContent button.removeFaxIncident").show();
            if (accordion.find("li.faxIncident").length >= 5) {
                accordion.find(".accordionContent button.addFaxIncident").hide();
                accordion.find(".accordionContent .tooltip.addFaxIncident").hide();
            }

            applyDatePicker();
            $("[data-other-option-field]").otheroptionfield();
            $("[data-checkbox-subfield]").checkboxsubfield();
            renameFaxIncidents();

            $(".accordionContent input").on("change", function () {
                $(this).valid();
            });

            var form = $(this).closest("form").removeData("validator").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);
        });

        $(".accordion").on("click", ".accordionContent button.removeFaxIncident", function (event) {
            event.preventDefault();
            var index;
            if ($(this).closest(".accordion li").prevAll("li.faxIncident:visible").length > 0) {
                index = $(this).closest(".accordion li").prevAll("li:visible").first().find(".accordionHeader").index(".accordionHeader");
            } else {
                index = $(this).closest(".accordion li").find(".accordionHeader").index(".accordionHeader");
            }
            var accordion = $(this).closest(".accordion");
            $(this).closest(".accordion li.faxIncident").remove();
            accordion.accordion("refresh");
            accordion.accordion({ active: index });

            accordion.find("li.faxIncident").last().find("button.next.incident").text("NEXT").removeClass("incident");
            accordion.find(".accordionContent button.addFaxIncident").show();
            accordion.find(".accordionContent .tooltip.addFaxIncident").show();
            if (accordion.find("li.faxIncident").length === 1) {
                accordion.find(".accordionContent button.removeFaxIncident").hide();
            }

            renameFaxIncidents();
        });

        $(".accordionContent input#fax").on("change", function () {
            if (this.checked) {
                $(".accordionContent input[name=CallType]").prop('checked', false);
                $(".accordionContent .radioButtonExtra").hide();
                $(".accordionContent .callOtherDescription").hide();
                $(".accordionContent input[name=OtherComplaintType]").prop('checked', false);
                $(".accordionContent .otherComplaintDescription").hide();
            }
        });
        $(".accordionContent input#call").on("change", function () {
            if (this.checked) {
                $(".accordionContent input[name=OtherComplaintType]").prop('checked', false);
                $(".accordionContent .otherComplaintDescription").hide();
            }
        });
        $(".accordionContent input#somethingElse").on("change", function () {
            if (this.checked) {
                $(".accordionContent input[name=CallType]").prop('checked', false);
                $(".accordionContent .callOtherDescription").hide();
            }
        });

        $(".accordionContent input[type=radio].goToCall").on("change", function () {
            if (this.checked) {
                goToCall(this);
            }
        });

        $(".accordionContent input[type=radio].goToFax").on("change", function () {
            if (this.checked) {
                goToFax(this);
            }
        });

        $(".accordionContent input[type=radio].goToSpam").on("change", function () {
            if (this.checked) {
                goToSpam(this);
            }
        });

        $(".accordionContent input[type=radio].goToEnquiry").on("change", function () {
            if (this.checked) {
                goToEnquiry(this);
            }
        });

        if ($(".accordionContent input[type=radio].goToCall:checked").lenth > 0) {
            goToCall($(".accordionContent input[type=radio].goToCall:checked"));
        }

        if ($(".accordionContent input[type=radio].goToFax:checked").length > 0) {
            goToFax($(".accordionContent input[type=radio].goToFax:checked"));
        }

        if ($(".accordionContent input[type=radio].goToSpam:checked").length > 0) {
            goToSpam($(".accordionContent input[type=radio].goToSpam:checked"));
        }

        if ($(".accordionContent input[type=radio].goToEnquiry:checked").length > 0) {
            goToEnquiry($(".accordionContent input[type=radio].goToEnquiry:checked"));
        }

        applyDatePicker();
        $("#ui-datepicker-div").wrap('<div class="datepicker" />');

        $(".accordionContent input").on("change", function () {
            $(this).valid();
        });

        $(".accordionContent input[name=Consent]").on("change", function () {
            if (this.checked) {
                if ($(this).val() !== "Yes") {
                    $(".withdrawnConsentDetails").hide();
                } else if ($("input[name=WithdrawnConsent]#withdrawnConsent:checked").length > 0) {
                    $(".withdrawnConsentDetails").show();
                }
            }
        });

        $(".populatePurpose").on("click", function () {
            if ($(".callPurpose input.radioCheck:checked").length === 0 && $("input[name=CallType]:checked").length > 0) {
                var id = $("input[name=CallType]:checked").attr("id");
                if (id === "promoting") {
                    $("#CallIncidents_0__CallPurposeAdvertise").click();
                }
                else if (id === "donation") {
                    $("#CallIncidents_0__CallPurposeDonation").click();
                }
                else if (id === "survey") {
                    $("#CallIncidents_0__CallPurposePoll").click();
                }
                else if (id === "election") {
                    $("#CallIncidents_0__CallPurposeElection").click();
                }
                else if (id === "otherCallType") {
                    $("#CallIncidents_0__CallPurposeOther").click();
                    $("textarea#CallIncidents_0__OtherPurpose").val($(".callOtherDescription textarea#CallOtherDescription").val());
                }
            }
        });
        /* Call and Fax Summary script starts */
        $(".accordion").on("click", ".accordionContent button.populateCallSummaries", function () {
            $(".callSummaries").val($("#CallIncidents_0__CallSummary").val());
            $(".parentComplainantNumber").val($("#ComplainantNumber").val());
        });

        $(".accordion").on("click", ".accordionContent button.populateFaxSummaries", function () {
            $(".faxSummaries").val($("#FaxIncidents_0__FaxSummary").val());
        });
        /* Call and Fax Summary script ends */

        //showing additional info when name of the business and phone provider values are same 
        $('#BusinessNameCalled').on('change', function () {
            var businessNameCalled = $(this).val().toLowerCase();
            var phoneServiceProvider = ($('#PhoneServiceProvider').val().toLowerCase());
            var otherPhoneServiceProvider = ($('#PhoneServiceProviderOther').val().toLowerCase());
            if (businessNameCalled == phoneServiceProvider || (phoneServiceProvider == "other" && businessNameCalled == otherPhoneServiceProvider)) {
                $('#businessCalledAdditionalInfo').show();
            } else {
                $('#businessCalledAdditionalInfo').hide();
            }
        });

    });
</script>

<div class="form-holder floatLeft">
    <div class="formDesc">@ViewBag.PageSummary</div>
    <div class="formError">@ViewBag.ErrorMessage</div>
    @using (Html.BeginUmbracoForm<ComplaintSurfaceController>("Consumer"))
    {
        @Html.AntiForgeryToken()
        <ul id="formAccordion" class="accordion globalAccordion">
            <li>
                <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
                    <span class="title">1. Complaint type</span>
                    <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
                </div>
                <div class="accordionContent">
                    <div>
                        <p class="italic">All fields marked with * are mandatory</p>
                        <div class="errorContainer"></div>
                    </div>
                    <br />
                    @if (SessionHelper.AgentId != null)
                    {
                        <div class="formField">
                            <div class="floatLeft">
                                @Html.RequiredLabelFor(model => model.Channel, new { @class = "inputLabel" })
                            </div>
                            <div class="floatLeft">
                                <div class="selectParent selectShort">
                                    @Html.ChannelDropDownListFor(model => model.Channel)
                                </div>
                                @Html.ValidationMessageFor(model => model.Channel, "", new { @class = "error" })
                            </div>
                            <div class="clear"></div>
                        </div>
                        <hr />
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.Channel)
                    }
                    <div class="labelDescMargin">
                        <p>Please lodge only one complaint per complaint form. A complaint may include up to 5 phone calls or faxes, but must be about the same receiving phone number and the same caller or business (where one business is calling on behalf of another). To lodge a complaint about a different caller or business, or receiving phone number you will need to lodge a separate complaint form.</p>
                    </div>
                    <div class="formField fieldMargin">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.ComplaintType)</legend>
                            <div class="labelDescMargin">
                                @Html.RequiredTextFor(model => model.ComplaintType, new { @class = "ProxiSemiBold inlineBlock" })
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.ComplaintType, SD.ACMA.DNCR.Infrastructure.Enums.ComplaintTypeEnum.Call, new { @id = "call", @class = "goToCall radioCheck", data_other_option_field = "callType" })
                                    @Html.Label("call", "You received an unwanted call", new { @class = "radioCheckLabel" })                                   
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.ComplaintType, SD.ACMA.DNCR.Infrastructure.Enums.ComplaintTypeEnum.Fax, new { @id = "fax", @class = "goToFax radioCheck" })
                                    @Html.Label("fax", "You received an unwanted marketing fax", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.ComplaintType, SD.ACMA.DNCR.Infrastructure.Enums.ComplaintTypeEnum.Other, new { @id = "somethingElse", @class = "goToEnquiry radioCheck", data_other_option_field = "otherComplaintType" })
                                    @Html.Label("somethingElse", "Something else", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.ComplaintType, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <div class="callType hidden">
                        <div class="formField fieldMargin">
                            <fieldset>
                                <legend>@Html.GetDisplayName(model => model.CallType)</legend>
                                <div class="labelDescMargin">
                                    @Html.RequiredTextFor(model => model.CallType, new { @class = "ProxiSemiBold inlineBlock" })
                                </div>
                                <div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Promoting goods, services or financial opportunities", new { @id = "promoting", @class = "goToCall radioCheck" })
                                        @Html.Label("promoting", "Promoting goods, services or financial opportunities", new { @class = "radioCheckLabel" })                                       
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Asking for donations", new { @id = "donation", @class = "goToCall radioCheck", data_other_option_field = "askingForDonations" })
                                        @Html.Label("donation", "Asking for donations", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="radioButtonExtra askingForDonations hidden toolTipContainer">
                                        <p>Some public interest organisations are allowed to make calls to numbers even when they are listed on the Do Not Call Register.</p>
                                        <br />
                                        <p>Calls seeking charity donations fall into this category and are permitted to be made to numbers on the Do Not Call Register.</p>
                                        <br />
                                        <p>However, charity calls are still covered by the <a class="consumerGreenColor" target="_blank" href="https://www.donotcall.gov.au/consumers/consumer-overview/industry-standards/">Industry Standard</a>.</p>
                                        <br />
                                        <p>If you would like to lodge a complaint relating to the Industry Standard, you may do so if:</p>
                                        <ul>
                                            <li>
                                                The call was made outside allowable times
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span class="widerTooltip">
                                                        <p>Callers are only able to call during the times set out below unless you have consented to being called at another time.</p>
                                                        <br />
                                                        <p>Telemarketing calls may only be made on:</p>
                                                        <ul>
                                                            <li>weekdays between 9 am-8 pm</li>
                                                            <li>Saturdays between 9 am-5 pm</li>
                                                        </ul>
                                                        <br />
                                                        <p>Research calls may only be made on:</p>
                                                        <ul>
                                                            <li>weekdays between 9 am-8:30 pm</li>
                                                            <li>Saturdays between 9 am-5 pm</li>
                                                            <li>Sundays between 9 am-5 pm</li>
                                                        </ul>
                                                        <br />
                                                        <p>No telemarketing or research calls are permitted to be made on National public holidays.</p>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller failed to provide mandatory information
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span class="widerTooltip">
                                                        <p>Callers are required to give you certain information when they make a telemarketing call:</p>
                                                        <br />
                                                        <p>At the start of the call, the caller must:</p>
                                                        <ul>
                                                            <li>provide their given name</li>
                                                            <li>identify the business they are calling from and the business who caused the call to be made</li>
                                                            <li>state the purpose of the call</li>
                                                        </ul>
                                                        <br />
                                                        <p>On request, the caller must provide:</p>
                                                        <ul>
                                                            <li>their business contact information</li>
                                                            <li>the contact details of the business who caused the call to be made</li>
                                                            <li>the name and contact details of the person responsible for inquiries and complaints</li>
                                                        </ul>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller did not enable calling line identification
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span>
                                                        <p>Callers must ensure that calling line identification (CLI) is displayed at the time they make a call and that this number is suitable for return contact (so that you can dial the number and obtain the name of the caller, who caused the call to be made and the purpose of the call).</p>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller did not terminate the call upon request
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span>
                                                        <p>Callers must terminate a call in certain circumstances, including where you ask for the call to be terminated or otherwise indicate that you do not want the call to continue.</p>
                                                    </span>
                                                </a>
                                            </li>
                                        </ul>
                                        <br />
                                        <p>Scroll down to continue with your complaint, or if you would like further information, you can follow this <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/receiving-calls-after-registering/" target="_blank">link</a> or <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Market research poll or survey", new { @id = "survey", @class = "goToCall radioCheck", data_other_option_field = "marketResearchPoll" })
                                        @Html.Label("survey", "Market research poll or survey", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="marketResearchPoll hidden radioButtonExtra toolTipContainer">
                                        <p>Some market research calls are permitted to be made to numbers on the Do Not Call Register, as long as there is no commercial element to the call—that is, as long as they are not trying to sell you something.</p>
                                        <br />
                                        <p>However, market research calls are still covered by the <a class="consumerGreenColor" target="_blank" href="https://www.donotcall.gov.au/consumers/consumer-overview/industry-standards/">Industry Standard</a>.</p>
                                        <br />
                                        <p>If you would like to lodge a complaint relating to the Industry Standard, you may do so if:</p>
                                        <ul>
                                            <li>
                                                The call was made outside allowable times
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span class="widerTooltip">
                                                        <p>Callers are only able to call during the times set out below unless you have consented to being called at another time.</p>
                                                        <br />
                                                        <p>Telemarketing calls may only be made on:</p>
                                                        <ul>
                                                            <li>weekdays between 9 am-8 pm</li>
                                                            <li>Saturdays between 9 am-5 pm</li>
                                                        </ul>
                                                        <br />
                                                        <p>Research calls may only be made on:</p>
                                                        <ul>
                                                            <li>weekdays between 9 am-8:30 pm</li>
                                                            <li>Saturdays between 9 am-5 pm</li>
                                                            <li>Sundays between 9 am-5 pm</li>
                                                        </ul>
                                                        <br />
                                                        <p>No telemarketing or research calls are permitted to be made on National public holidays.</p>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller failed to provide mandatory information
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span class="widerTooltip">
                                                        <p>Callers are required to give you certain information when they make a telemarketing call:</p>
                                                        <br />
                                                        <p>At the start of the call, the caller must:</p>
                                                        <ul>
                                                            <li>provide their given name</li>
                                                            <li>identify the business they are calling from and the business who caused the call to be made</li>
                                                            <li>state the purpose of the call</li>
                                                        </ul>
                                                        <br />
                                                        <p>On request, the caller must provide:</p>
                                                        <ul>
                                                            <li>their business contact information</li>
                                                            <li>the contact details of the business who caused the call to be made</li>
                                                            <li>the name and contact details of the person responsible for inquiries and complaints</li>
                                                        </ul>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller did not enable calling line identification
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span>
                                                        <p>Callers must ensure that calling line identification (CLI) is displayed at the time they make a call and that this number is suitable for return contact (so that you can dial the number and obtain the name of the caller, who caused the call to be made and the purpose of the call).</p>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller did not terminate the call upon request
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span>
                                                        <p>Callers must terminate a call in certain circumstances, including where you ask for the call to be terminated or otherwise indicate that you do not want the call to continue.</p>
                                                    </span>
                                                </a>
                                            </li>
                                        </ul>
                                        <br />
                                        <p>Scroll down to continue with your complaint, or if you would like further information, you can follow this <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/receiving-calls-after-registering/" target="_blank">link</a> or <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                                    </div>  
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Product recall or fault rectification", new { @id = "recall", @class = "goToEnquiry radioCheck", data_other_option_field = "productRecall" })
                                        @Html.Label("recall", "Product recall or fault rectification", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="productRecall hidden radioButtonExtra">
                                        <p>Calls or faxes related to product recalls, appointment rescheduling or reminder, fault rectification and making payments do not fall under the Do Not Call Rules. These calls or faxes can be legally directed at numbers on the Do Not Call Register.</p>
                                        <br/>
                                        <p>If you would like further information, you can follow this <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/receiving-calls-after-registering/" target="_blank">link</a> or <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Appointment rescheduling or reminder", new { @id = "rescheduling", @class = "goToEnquiry radioCheck", data_other_option_field = "appointment" })
                                        @Html.Label("rescheduling", "Appointment rescheduling or reminder", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="appointment hidden radioButtonExtra">
                                        <p>Calls or faxes related to product recalls, appointment rescheduling or reminder, fault rectification and making payments do not fall under the Do Not Call Rules. These calls or faxes can be legally directed at numbers on the Do Not Call Register.</p>
                                        <br/>
                                        <p>If you would like further information, you can follow this <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/receiving-calls-after-registering/" target="_blank">link</a> or <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Debt collection or payment of overdue account", new { @id = "payment", @class = "goToEnquiry radioCheck", data_other_option_field = "debtCollection" })
                                        @Html.Label("payment", "Debt collection or payment of overdue account", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="debtCollection hidden radioButtonExtra">
                                        <p>Debt collection calls are permitted to be made to numbers on the Do Not Call Register. The Do Not Call Register only applies to calls that are 'telemarketing calls', which does not include calls relating to debt collection. The Do Not Call Register Act has no role in regulating calls that are not commercial in nature.</p>
                                        <br/>
                                        <p>If you would like further information, you can follow this <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/receiving-calls-after-registering/" target="_blank">link</a> or <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Voting in an upcoming election", new {@id = "election", @class = "goToCall radioCheck", data_other_option_field = "upcomingElection"})
                                        @Html.Label("election", "Voting in an upcoming election", new {@class = "radioCheckLabel"})
                                    </div>
                                    <div class="upcomingElection hidden radioButtonExtra toolTipContainer">
                                        <p>During an election period, even if your phone number is on the Do Not Call Register, you might receive calls relating to the election, including calls providing information, polling calls, research calls and calls from parties seeking campaign donations.</p>
                                        <br />
                                        <p>If the call is simply providing information and is not trying to sell you something or solicit donations—that is, it does not have a commercial element—it is allowed to be made, even to numbers on the Do Not Call Register. This includes recorded message calls. The Do Not Call Register Act has no role in regulating calls that are not commercial in nature.</p>
                                        <br />
                                        <p>However calls about opinion polling for an upcoming election or seeking campaign donations for political parties, independent members of parliament, or candidates for election are still covered by the <a class="consumerGreenColor" target="_blank" href="https://www.donotcall.gov.au/consumers/consumer-overview/industry-standards/">Industry Standard</a>.</p>
                                        <br />
                                        <p>If the call you received is about opinion polling for an upcoming election or seeking campaign donations and you would like to lodge a complaint relating to the Industry Standard, you may do so if:</p>
                                        <ul>
                                            <li>
                                                The call was made outside allowable times
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span class="widerTooltip">
                                                        <p>Callers are only able to call during the times set out below unless you have consented to being called at another time.</p>
                                                        <br />
                                                        <p>Telemarketing calls may only be made on:</p>
                                                        <ul>
                                                            <li>weekdays between 9 am-8 pm</li>
                                                            <li>Saturdays between 9 am-5 pm</li>
                                                        </ul>
                                                        <br />
                                                        <p>Research calls may only be made on:</p>
                                                        <ul>
                                                            <li>weekdays between 9 am-8:30 pm</li>
                                                            <li>Saturdays between 9 am-5 pm</li>
                                                            <li>Sundays between 9 am-5 pm</li>
                                                        </ul>
                                                        <br />
                                                        <p>No telemarketing or research calls are permitted to be made on National public holidays.</p>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller failed to provide mandatory information
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span class="widerTooltip">
                                                        <p>Callers are required to give you certain information when they make a telemarketing call:</p>
                                                        <br />
                                                        <p>At the start of the call, the caller must:</p>
                                                        <ul>
                                                            <li>provide their given name</li>
                                                            <li>identify the business they are calling from and the business who caused the call to be made</li>
                                                            <li>state the purpose of the call</li>
                                                        </ul>
                                                        <br />
                                                        <p>On request, the caller must provide:</p>
                                                        <ul>
                                                            <li>their business contact information</li>
                                                            <li>the contact details of the business who caused the call to be made</li>
                                                            <li>the name and contact details of the person responsible for inquiries and complaints</li>
                                                        </ul>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller did not enable calling line identification
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span>
                                                        <p>Callers must ensure that calling line identification (CLI) is displayed at the time they make a call and that this number is suitable for return contact (so that you can dial the number and obtain the name of the caller, who caused the call to be made and the purpose of the call).</p>
                                                    </span>
                                                </a>
                                            </li>
                                            <li>
                                                The caller did not terminate the call upon request
                                                <a href="#" class="tooltip">
                                                    <img src="/images/tooltip.png" alt="tip" />
                                                    <span>
                                                        <p>Callers must terminate a call in certain circumstances, including where you ask for the call to be terminated or otherwise indicate that you do not want the call to continue.</p>
                                                    </span>
                                                </a>
                                            </li>
                                        </ul>
                                        <br />
                                        <p>Scroll down to continue with your complaint, or if you would like further information, you can follow this <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/political-calls-you-might-receive/" target="_blank">link</a> or <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Scam", new {@id = "scam", @class = "goToCall radioCheck", data_other_option_field = "scam"})
                                        @Html.Label("scam", "Scam", new {@class = "radioCheckLabel"})
                                    </div>
                                    <div class="scam hidden radioButtonExtra">
                                        <p>Protect yourself from phone scams:</p>
                                        <ul>
                                            <li>Be suspicious of unexpected calls</li>
                                            <li>Never give your personal or financial details over the phone unless you made the call and the phone number came from a trusted source.</li>
                                            <li>Any requests to send money via gift cards or wire transfer details should be treated as suspicious.</li>
                                            <li>If you are being pressured to act, hang up.</li>
                                        </ul>
                                        <br/>
                                        <p>Useful tips about other ways you can protect yourself are available on the ACCC's <a class="consumerGreenColor" href="https://www.scamwatch.gov.au/" target="_blank">SCAMwatch website</a>.</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "General nuisance or abusive calls", new { @id = "nuisance", @class = "goToEnquiry radioCheck", data_other_option_field = "generalNuisance" })
                                        @Html.Label("nuisance", "General nuisance or abusive calls", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="generalNuisance hidden radioButtonExtra">
                                        <p>The Do Not Call Register Act has no role in regulating calls that are not commercial in nature. If you are receiving nuisance, threatening or abusive calls that are not commercial in nature, you may wish to contact your telephone service provider. They may be able to assist if the calls form a 'pattern of unwelcome communications' within the meaning of the industry code <a class="consumerGreenColor" href="http://www.commsalliance.com.au/Documents/all/codes/c525" target="_blank">Handling of Life Threatening and Unwelcome Communications</a>.</p>
                                        <br />
                                        <p>Your service provider has an obligation to assist you where calls fall within this code, even where these calls are found to be from telemarketers. If you are not satisfied with the response you receive from your service provider, you may wish to take the matter to the Telecommunications Industry Ombudsman by completing a complaint form at <a class="consumerGreenColor" href="http://www.tio.com.au" target="_blank">www.tio.com.au</a> or by calling 1800 062 058.</p>
                                        <br/>
                                        <p>If you receive a life threatening call, you should contact the police on 000.</p>
                                        <br />
                                        <p>If you would like further information, you can <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Spam SMS, MMS or email message", new { @id = "spam", @class = "goToSpam radioCheck", data_other_option_field = "spamSms" })
                                        @Html.Label("spam", "Spam SMS, MMS or email message", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="spamSms hidden radioButtonExtra">
                                        <p>The Do Not Call legislation does not apply to emails or SMS messages. However, you can report unsolicited emails or SMS on the ACMA's website by following <a class="consumerGreenColor" href="http://www.acma.gov.au/Citizen/Phones/Mobile/Dealing-with-mobile-spam/spam-complaints-reports-and-enquiries" target="_blank">this link</a>.</p>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallType, "Other", new {@id = "otherCallType", @class = "goToCall radioCheck", data_other_option_field = "callOtherDescription"})
                                        @Html.Label("otherCallType", "Other", new {@class = "radioCheckLabel"})
                                    </div>
                                    @Html.ValidationMessageFor(model => model.CallType, "", new {@class = "error"})
                                </div>
                            </fieldset>
                            <div class="clear"></div>
                        </div>
                        <div class="formField fieldMargin callOtherDescription hidden">
                            <div class="labelDescMargin">
                                @Html.RequiredLabelFor(model => model.CallOtherDescription, new { @class = "ProxiSemiBold" })
                            </div>
                            <div>
                                @Html.TextAreaFor(model => model.CallOtherDescription, new { @class = "deny-html" })
                                @Html.ValidationMessageFor(model => model.CallOtherDescription, "", new { @class = "error" })
                            </div>
                            <div class="clear"></div>
                        </div>
                    </div>
                    <div class="otherComplaintType hidden">
                        <div class="formField fieldMargin">
                            <fieldset>
                                <legend>@Html.GetDisplayName(model => model.OtherComplaintType)</legend>
                                <div class="labelDescMargin">
                                    @Html.RequiredTextFor(model => model.OtherComplaintType, new { @class = "ProxiSemiBold inlineBlock" })
                                </div>
                                <div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.OtherComplaintType, SD.ACMA.DNCR.Infrastructure.Enums.OtherComplaintTypeEnum.Enquiry, new { @id = "enquiry", @class = "goToEnquiry radioCheck" })
                                        @Html.Label("enquiry", "An enquiry", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.OtherComplaintType, SD.ACMA.DNCR.Infrastructure.Enums.OtherComplaintTypeEnum.Registration, new { @id = "registration", @class = "goToEnquiry radioCheck" })
                                        @Html.Label("registration", "Registering a number", new { @class = "radioCheckLabel" })
                                    </div>
                                    @*<div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.OtherComplaintType, SD.ACMA.DNCR.Infrastructure.Enums.OtherComplaintTypeEnum.Other, new { @id = "otherComplaint", @class = "goToEnquiry radioCheck" })
                                        @Html.Label("otherComplaint", "Other", new { @class = "radioCheckLabel" })
                                    </div>*@
                                    @Html.ValidationMessageFor(model => model.OtherComplaintType, "", new { @class = "error" })
                                </div>
                            </fieldset>
                            <div class="clear"></div>
                        </div>
                        <div class="fieldMargin">
                            <p>
                                If you have an access seeker account and would like to make an enquiry about a matter other than a call or fax you have received, such as your Access Seeker account or the washing process, please follow <a href="#" class="consumerGreenColor openSignIn">this link</a> and log into your account. Otherwise, if you are uncertain where to direct a matter, select 'An Enquiry' above.
                            </p>
                        </div>
                    </div>
                    <hr/>
                    <div class="note">
                        <p>
                            The Privacy Act 1988 (Cth) imposes obligations on the ACMA and the register operator in relation to the collection, security, quality, access, use and disclosure of personal information. These obligations are detailed in the <a class="consumerGreenColor" href="@ViewBag.AustralianPrivacyUrl" target="_blank">Australian Privacy Principles</a>. For more information about the collection of data in this form, please see the Do Not Call Register <a class="consumerGreenColor" href="@ViewBag.DataCollectionNode" target="_blank">data collection notice</a>.
                        </p>
                    </div>
                    @Html.HiddenFor(model => model.RedirectUrl)
                    <div>
                        <button class="ProxiBold next validate">NEXT</button>
                        <p class="failedMandatory hideOnMobile hidden">You have failed to complete a mandatory field</p>
                    </div>                                   
                </div>               
            </li>
            <li class="incident other">
                <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
                    <span class="title">2. Complainant details</span>
                    <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
                </div>
            <div class="accordionContent">
            <div>
                <p class="italic">All fields marked with * are mandatory</p>
                <div class="errorContainer"></div>
            </div>
            <br />
            <div class="formField toolTipContainer">
                @Html.CheckBoxFor(model => model.IsAnonymous, new {@class = "radioCheck"})
                @Html.RequiredLabelFor(model => model.IsAnonymous, new { @class = "radioCheckLabel" })
                <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>If you choose to make your complaint anonymous, you will still be given an opportunity to provide a contact email address or contact phone number. If you choose not to provide either of these details, we will be unable to contact you in relation to your complaint. You should also consider your response to the Declarations requested near the completion of this form.</span></a>
            </div>
            <hr/>
            <fieldset class="anonymousHide">
                <legend>Your details</legend>
                <div class="fieldMargin subHeader anonymousHide">
                    <p>Your details</p>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.Title, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        <div class="selectParent selectShort">
                            @Html.TitlesDropDownListFor(model => model.Title)
                        </div>
                        @Html.ValidationMessageFor(model => model.Title, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.FirstName, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "long deny-html" })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.LastName, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.LastName, new { @class = "long deny-html" })
                        @Html.ValidationMessageFor(model => model.LastName, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
            </fieldset>
            <hr class="anonymousHide"/>
            <fieldset class="anonymousHide">
                <legend>Your address</legend>
                <div class="fieldMargin subHeader anonymousHide">
                    <p>Your address</p>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.AddressLine1, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.AddressLine1, new {@class = "long deny-html"})
                        @Html.ValidationMessageFor(model => model.AddressLine1, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.AddressLine2, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.AddressLine2, new { @class = "long deny-html" })
                        @Html.ValidationMessageFor(model => model.AddressLine2, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.City, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.City, new {@class = "long deny-html"})
                        @Html.ValidationMessageFor(model => model.City, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.Postcode, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.Postcode, new {@class = "short deny-html"})
                        @Html.ValidationMessageFor(model => model.Postcode, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.State, new { @class = "inputLabel optional", id = "stateLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.State, new { @class = "long textbox deny-html" })
                        <div class="selectParent selectShort">
                            @Html.StateDropDownListFor(model => model.State, new {@class = "dropdown notrequired"})
                        </div>
                        @Html.ValidationMessageFor(model => model.State, "", new {@class = "error", id = "stateError"})
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin anonymousHide">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.Country, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        <div class="selectParent selectLong">
                            @Html.DropDownListFor(model => model.Country, Model.CountryList, "Select")
                        </div>
                        @Html.ValidationMessageFor(model => model.Country, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
            </fieldset>
            <hr class="anonymousHide"/>
            <fieldset>
                <legend>How to contact you</legend>
                <div class="subHeader">
                    <p>How to contact you</p>
                </div>
                <div class="labelDescMargin">
                    <p>These contact details will only be used if we need to contact you and will not be disclosed to any other party (unless the ACMA is required to disclose this information to another party by law). If you do not provide any contact details (which can include your postal address), we will be unable to contact you. Providing your email address means you will receive email confirmation that your complaint has been lodged and your complaint reference number.</p>
                </div>
                <div class="formField fieldMargin">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.Email, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.Email, new { @class = "long deny-html" })
                        @Html.ValidationMessageFor(model => model.Email, "", new {@class = "error"})
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.ContactNumber, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        @Html.TextBoxFor(model => model.ContactNumber, new { @class = "long deny-html", @type = "tel" })
                        @Html.ValidationMessageFor(model => model.ContactNumber, "", new {@class = "error numberError"})
                    </div>
                    <div class="clear"></div>
                </div>
            </fieldset>
            <hr/>
            <fieldset>
                <legend>Number called</legend>
                <div class="subHeader">
                    <p class="textChange">Number called</p>
                </div>
                <div class="formField fieldMargin">
                    <div class="labelDescMargin">
                        @Html.RequiredLabelFor(model => model.ComplainantNumber, new { @class = "ProxiSemiBold textChange", @id = "lblComplainantNumber", })
                    </div>
                    <div class="toolTipContainer">
                        @Html.TextBoxFor(model => model.ComplainantNumber, new { @class = "long hasTooltip deny-html", @type = "tel" })
                        <a href="#" id="receivingPhoneTooltipLink" class="tooltip afterField"><img src="/images/tooltip.png" alt="tip" /><span id="receivingPhoneTooltip">This should be the phone number that the caller dialled to contact you. It must be an Australian phone number, but may be a fixed line or mobile number and may be different to your contact phone number.</span></a>
                        @Html.ValidationMessageFor(model => model.ComplainantNumber, "", new { @class = "error" })
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin">
                    <div class="labelDescMargin">
                        @Html.RequiredLabelFor(model => model.PhoneServiceProvider, new { @class = "ProxiSemiBold" })
                        </div>
                    <div class="toolTipContainer">
                        <div class="selectParent selectShort hasTooltip">
                            @Html.PhoneProviderDropDownListFor(model => model.PhoneServiceProvider, new { @class = "dropdown" })
                        </div>
                        <a href="#" class="tooltip afterField"><img src="/images/tooltip.png" alt="tip" /><span id="PhoneServiceProviderTooltip"></span></a>
                        @Html.ValidationMessageFor(model => model.PhoneServiceProvider, "", new { @class = "error" })
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin otherPhoneProvider hidden">
                    <div class="labelDescMargin">
                        @Html.RequiredLabelFor(model => model.PhoneServiceProviderOther, new { @class = "ProxiSemiBold" })
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.PhoneServiceProviderOther, new { @class = "long deny-html" })
                        @Html.ValidationMessageFor(model => model.PhoneServiceProviderOther, "", new { @class = "error" })
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin">
                    <fieldset>
                        <legend>@Html.GetDisplayName(model => model.IsNumberOnRegister)</legend>
                        <div class="labelDescMargin toolTipContainer">
                            @Html.RequiredTextFor(model => model.IsNumberOnRegister, new { @class = "ProxiSemiBold inlineBlock" })
                            <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>If you are unsure, you can check your number on the 'Check Your Numbers' page (see left hand column).</span></a>
                        </div>
                        <div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.IsNumberOnRegister, true, new { @id = "onRegister", @class = "radioCheck", data_other_option_field = "onRegister" })
                                @Html.Label("onRegister", "Yes", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.IsNumberOnRegister, false, new { @id = "notOnRegister", @class = "radioCheck", data_other_option_field = "notOnRegister" })
                                @Html.Label("notOnRegister", "No", new { @class = "radioCheckLabel" })
                            </div>
                            @Html.ValidationMessageFor(model => model.IsNumberOnRegister, "", new { @class = "error" })
                        </div>
                        <div class="labelDescMargin onRegister hidden">
                        <p>Please note: If the phone number that the <span class="textChange">call</span> was received on has been on the Do Not Call Register for less than 30 days, the ACMA will not be able to find a potential breach of the Do Not Call Register Act. However, the <span class="textChange">call</span> may still raise issues relating to the <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/industry-standards/" target="_blank">Industry Standard</a> that you can also make a complaint about using this form. If you are unsure whether your number is on the Register, or would like to Register your number, please go to <a href="@ViewBag.RegistrationUrl" target="_blank" class="consumerGreenColor">this page</a> or call <a href="tel:1300792958" class="consumerGreenColor">1300 792 958</a>.</p>
                        </div>
                        <div class="labelDescMargin notOnRegister hidden toolTipContainer">
                            <p>You have indicated that the number you received the <span class="textChange">call</span> on is not listed on the Do Not Call Register. As such, the <span class="textChange">call</span> you received does not appear to breach the Do Not Call Register rules. However the <span class="textChange">call</span> may be subject to the Telemarketing and Research Calls Industry Standard.</p>
                            <br />
                            <p>If you would like to register your number on the Do Not Call Register, please <a href="@ViewBag.RegistrationUrl" target="_blank" class="consumerGreenColor">click here</a>.</p>
                            <br />
                            <p>If you would still like to lodge a complaint relating to the <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/industry-standards/" target="_blank">Industry Standard</a>, you may do so if:</p>
                            <ul>
                                <li>
                                    The call was made outside allowable times
                                    <a href="#" class="tooltip">
                                        <img src="/images/tooltip.png" alt="tip" />
                                        <span class="widerTooltip">
                                            <p>Callers are only able to call during the times set out below unless you have consented to being called at another time.</p>
                                            <br />
                                            <p>Telemarketing calls may only be made on:</p>
                                            <ul>
                                                <li>weekdays between 9 am-8 pm</li>
                                                <li>Saturdays between 9 am-5 pm</li>
                                            </ul>
                                            <br />
                                            <p>Research calls may only be made on:</p>
                                            <ul>
                                                <li>weekdays between 9 am-8:30 pm</li>
                                                <li>Saturdays between 9 am-5 pm</li>
                                                <li>Sundays between 9 am-5 pm</li>
                                            </ul>
                                            <br />
                                            <p>No telemarketing or research calls are permitted to be made on National public holidays.</p>
                                        </span>
                                    </a>
                                </li>
                                <li>
                                    The caller failed to provide mandatory information
                                    <a href="#" class="tooltip">
                                        <img src="/images/tooltip.png" alt="tip" />
                                        <span class="widerTooltip">
                                            <p>Callers are required to give you certain information when they make a telemarketing call:</p>
                                            <br />
                                            <p>At the start of the call, the caller must:</p>
                                            <ul>
                                                <li>provide their given name</li>
                                                <li>identify the business they are calling from and the business who caused the call to be made</li>
                                                <li>state the purpose of the call</li>
                                            </ul>
                                            <br />
                                            <p>On request, the caller must provide:</p>
                                            <ul>
                                                <li>their business contact information</li>
                                                <li>the contact details of the business who caused the call to be made</li>
                                                <li>the name and contact details of the person responsible for inquiries and complaints</li>
                                            </ul>
                                        </span>
                                    </a>
                                </li>
                                <li>
                                    The caller did not enable calling line identification
                                    <a href="#" class="tooltip">
                                        <img src="/images/tooltip.png" alt="tip" />
                                        <span>
                                            <p>Callers must ensure that calling line identification (CLI) is displayed at the time they make a call and that this number is suitable for return contact (so that you can dial the number and obtain the name of the caller, who caused the call to be made and the purpose of the call).</p>
                                        </span>
                                    </a>
                                </li>
                                <li>
                                    The caller did not terminate the call upon request
                                    <a href="#" class="tooltip">
                                        <img src="/images/tooltip.png" alt="tip" />
                                        <span>
                                            <p>Callers must terminate a call in certain circumstances, including where you ask for the call to be terminated or otherwise indicate that you do not want the call to continue.</p>
                                        </span>
                                    </a>
                                </li>
                            </ul>
                            <br />
                            <p>If you would like further information, you can follow this <a class="consumerGreenColor" href="https://www.donotcall.gov.au/consumers/consumer-overview/registering-numbers/" target="_blank">link</a> or <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                        </div>
                    </fieldset>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin callOnlyFields">
                    <fieldset>
                        <legend>@Html.GetDisplayName(model => model.IsBusinessNumber)</legend>
                        <div class="labelDescMargin toolTipContainer">
                            @Html.RequiredTextFor(model => model.IsBusinessNumber, new { @class = "ProxiSemiBold inlineBlock" })
                        </div>
                        <div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.IsBusinessNumber, true, new { @id = "isBusinessNo", @class = "radioCheck", data_other_option_field = "onBusinessNumber" })
                                @Html.Label("isBusinessNo", "Yes", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.IsBusinessNumber, false, new { @id = "notBusinessNo", @class = "radioCheck" })
                                @Html.Label("notBusinessNo", "No", new { @class = "radioCheckLabel" })
                            </div>
                            @Html.ValidationMessageFor(model => model.IsBusinessNumber, "", new { @class = "error" })
                        </div>
                        <div class="labelDescMargin onBusinessNumber hidden toolTipContainer">
                            <p>Telephone numbers that are used primarily for business purposes are not eligible to be registered on the Do Not Call Register. The ACMA is unable to accept complaints about telemarketing calls to business telephone numbers, unless the caller has failed to meet the requirements of the <a class="consumerGreenColor" target="_blank" href="https://www.donotcall.gov.au/consumers/consumer-overview/industry-standards/">Industry Standard</a>.</p>
                            <br />
                            <p>If you would like to lodge a complaint relating to the Industry Standard, you may do so if:</p>
                            <ul>
                                <li>
                                    The call was made outside allowable times
                                    <a href="#" class="tooltip">
                                        <img src="/images/tooltip.png" alt="tip" />
                                        <span class="widerTooltip">
                                            <p>Callers are only able to call during the times set out below unless you have consented to being called at another time.</p>
                                            <br />
                                            <p>Telemarketing calls may only be made on:</p>
                                            <ul>
                                                <li>weekdays between 9 am-8 pm</li>
                                                <li>Saturdays between 9 am-5 pm</li>
                                            </ul>
                                            <br />
                                            <p>Research calls may only be made on:</p>
                                            <ul>
                                                <li>weekdays between 9 am-8:30 pm</li>
                                                <li>Saturdays between 9 am-5 pm</li>
                                                <li>Sundays between 9 am-5 pm</li>
                                            </ul>
                                            <br />
                                            <p>No telemarketing or research calls are permitted to be made on National public holidays.</p>
                                        </span>
                                    </a>
                                </li>
                                <li>
                                    The caller failed to provide mandatory information
                                    <a href="#" class="tooltip">
                                        <img src="/images/tooltip.png" alt="tip" />
                                        <span class="widerTooltip">
                                            <p>Callers are required to give you certain information when they make a telemarketing call:</p>
                                            <br />
                                            <p>At the start of the call, the caller must:</p>
                                            <ul>
                                                <li>provide their given name</li>
                                                <li>identify the business they are calling from and the business who caused the call to be made</li>
                                                <li>state the purpose of the call</li>
                                            </ul>
                                            <br />
                                            <p>On request, the caller must provide:</p>
                                            <ul>
                                                <li>their business contact information</li>
                                                <li>the contact details of the business who caused the call to be made</li>
                                                <li>the name and contact details of the person responsible for inquiries and complaints</li>
                                            </ul>
                                        </span>
                                    </a>
                                </li>
                                <li>
                                    The caller did not enable calling line identification
                                    <a href="#" class="tooltip">
                                        <img src="/images/tooltip.png" alt="tip" />
                                        <span>
                                            <p>Callers must ensure that calling line identification (CLI) is displayed at the time they make a call and that this number is suitable for return contact (so that you can dial the number and obtain the name of the caller, who caused the call to be made and the purpose of the call).</p>
                                        </span>
                                    </a>
                                </li>
                                <li>
                                    The caller did not terminate the call upon request
                                    <a href="#" class="tooltip">
                                        <img src="/images/tooltip.png" alt="tip" />
                                        <span>
                                            <p>Callers must terminate a call in certain circumstances, including where you ask for the call to be terminated or otherwise indicate that you do not want the call to continue.</p>
                                        </span>
                                    </a>
                                </li>
                            </ul>
                            <br />
                            <p>If you would like further information, you can follow this <a class="consumerGreenColor" href="http://www.acma.gov.au/Citizen/Phones/Landlines/Reduce-unwanted-calls/life-threatening-calls-your-privacy-world-i-acma" target="_blank">link</a> or <a class="consumerGreenColor" href="@ViewBag.LodgeEnquiryUrl">lodge an enquiry</a>.</p>
                        </div>
                    </fieldset>
                    <div class="clear"></div>
                </div>          
            </fieldset>
            <hr />
            <div class="hidden faxOnlyFields">
                <fieldset>
                    <legend>Diversion from destination number</legend>
                    <div class="subHeader">
                        <p>Diversion from destination number</p>
                    </div>
                    <div class="formField fieldMargin">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.HaveDestinationNumber)</legend>
                            <div class="labelDescMargin">
                                @Html.RequiredTextFor(model => model.HaveDestinationNumber, new { @class = "ProxiSemiBold inlineBlock" })
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.HaveDestinationNumber, true, new { @id = "haveDestinationNumber", @class = "radioCheck", data_other_option_field = "destinationNumber" })
                                    @Html.Label("haveDestinationNumber", "Yes", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.HaveDestinationNumber, false, new { @id = "noDestinationNumber", @class = "radioCheck" })
                                    @Html.Label("noDestinationNumber", "No", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.HaveDestinationNumber, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin hidden destinationNumber">
                        <div class="labelDescMargin toolTipContainer">
                            @Html.RequiredLabelFor(model => model.DestinationNumber, new { @class = "ProxiSemiBold" })
                            <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>If the destination number is not listed on the Do Not Call Register, fax marketers may still send faxes to this number, even if the destination number is diverted to another fax number that is on the Register.</span></a>
                        </div>
                        <div>
                            @Html.TextBoxFor(model => model.DestinationNumber, new { @class = "long deny-html", @type = "tel" })
                            @Html.ValidationMessageFor(model => model.DestinationNumber, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                </fieldset>
                <hr />
                <div class="formField fieldMargin">
                    <fieldset>
                        <legend>@Html.GetDisplayName(model => model.FaxConsent)</legend>
                        <div class="labelDescMargin">
                            @Html.RequiredTextFor(model => model.FaxConsent, new { @class = "ProxiSemiBold textChange inlineBlock" })                         
                        </div>
                        <div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.FaxConsent, "Yes", new { @id = "faxWithConsent", @class = "radioCheck", data_other_option_field = "withdrawnConsent" })
                                @Html.Label("faxWithConsent", "Yes", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.FaxConsent, "No", new { @id = "faxNoConsent", @class = "radioCheck" })
                                @Html.Label("faxNoConsent", "No", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.FaxConsent, "Unsure", new { @id = "faxUnsureConsent", @class = "radioCheck" })
                                @Html.Label("faxUnsureConsent", "Unsure", new { @class = "radioCheckLabel" })
                            </div>
                            @Html.ValidationMessageFor(model => model.FaxConsent, "", new { @class = "error" })
                        </div>
                    </fieldset>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin withdrawnConsent hidden">
                    <fieldset>
                        <legend>@Html.GetDisplayName(model => model.FaxWithdrawnConsent)</legend>
                        <div class="labelDescMargin">
                            @Html.RequiredTextFor(model => model.FaxWithdrawnConsent, new { @class = "ProxiSemiBold inlineBlock" })
                        </div>
                        <div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.FaxWithdrawnConsent, true, new { @id = "faxWithdrawnConsent", @class = "radioCheck", data_other_option_field = "withdrawnConsentDetails" })
                                @Html.Label("faxWithdrawnConsent", "Yes", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.FaxWithdrawnConsent, false, new { @id = "faxNoWithdrawnConsent", @class = "radioCheck" })
                                @Html.Label("faxNoWithdrawnConsent", "No", new { @class = "radioCheckLabel" })
                            </div>
                            @Html.ValidationMessageFor(model => model.FaxWithdrawnConsent, "", new { @class = "error" })
                        </div>
                    </fieldset>
                    <div class="clear"></div>
                </div>
                <div class="withdrawnConsentDetails hidden">
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.FaxDateConsentWithdrawn, new { @class = "ProxiSemiBold" })
                        </div>
                        <div>
                            @Html.TextBoxFor(model => model.FaxDateConsentWithdrawn, new { @class = "short deny-html", type = "date" })
                            @Html.ValidationMessageFor(model => model.FaxDateConsentWithdrawn, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.FaxAdditionalWithdrawnConsent, new { @class = "ProxiSemiBold" })
                        </div>
                        <div>
                            @Html.TextAreaFor(model => model.FaxAdditionalWithdrawnConsent, new { @class = "deny-html" })
                            @Html.ValidationMessageFor(model => model.FaxAdditionalWithdrawnConsent, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                </div>
                <hr />
                <div class="note">
                    <p class="textChange">You can add details of up to five calls to this complaint in the next step. Each call must relate to the same caller or business and the same receiving phone number. To lodge a complaint about a different caller or receiving phone number you will need to lodge a new complaint form. You will also have an opportunity to provide additional details about your complaint in the next step.</p>
                </div>
            </div>
            <div>
                <button class="ProxiBold next validate">NEXT</button>
                <p class="failedMandatory hideOnMobile hidden">You have failed to complete a mandatory field</p>
            </div>
            </div>
            </li>
            <li class="incident callOnly">
                <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
                    <span class="title textChange">3. Caller details</span>
                    <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
                </div>
                <div class="accordionContent">
                    <div>
                        <p>If the information you provide comes from a source other than the call (such as an internet search, web page or phone book), it is helpful to the ACMA if you can identify that source in your response.</p>
                    </div>
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.BusinessNameCalled, new { @class = "ProxiSemiBold textChange" })
                        </div>
                        <div class="toolTipContainer">
                            @Html.TextBoxFor(model => model.BusinessNameCalled, new { @class = "long hasTooltip deny-html" })
                            <a href="#" class="tooltip afterField"><img src="/images/tooltip.png" alt="tip" /><span class="textChange">If you were given a business name during the call, please provide it as it was given to you. If you found an alternate version of the name from another source, please indicate that also with an explanation of the source.</span></a>
                            @Html.ValidationMessageFor(model => model.BusinessNameCalled, "", new { @class = "error" })
                        </div>
                        <div id="businessCalledAdditionalInfo" class="labelDescMargin hidden">
                            <p>You have said that your phone provider and the business who called you are the same. Did you know that you may have given your consent to be contacted by your phone provider and its affiliates through your business relationship with your provider? If you do not believe that you have consented to receiving this call, you may continue to lodge your complaint. </p>
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.DetailsBusinessCalled, new { @class = "ProxiSemiBold textChange" })
                        </div>
                        <div>
                            @Html.TextAreaFor(model => model.DetailsBusinessCalled, new { @class = "deny-html" })
                            @Html.ValidationMessageFor(model => model.DetailsBusinessCalled, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.ProductBusinessName, new { @class = "ProxiSemiBold" })
                        </div>
                        <div class="toolTipContainer">
                            @Html.TextBoxFor(model => model.ProductBusinessName, new { @class = "long hasTooltip deny-html" })
                            <a href="#" class="tooltip afterField"><img src="/images/tooltip.png" alt="tip" /><span class="textChange">If you were given a business name during the call, please provide it as it was given to you. If you found an alternate version of the name from another source, please indicate that also with an explanation of the source.</span></a>
                            @Html.ValidationMessageFor(model => model.ProductBusinessName, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.DetailsProductBusinessName, new { @class = "ProxiSemiBold" })
                        </div>
                        <div>
                            @Html.TextAreaFor(model => model.DetailsProductBusinessName, new { @class = "deny-html" })
                            @Html.ValidationMessageFor(model => model.DetailsProductBusinessName, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.ProductName, new { @class = "ProxiSemiBold" })
                        </div>
                        <div>
                            @Html.TextBoxFor(model => model.ProductName, new { @class = "long deny-html" })
                            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.CallParties)</legend>
                            <div class="labelDescMargin toolTipContainer">
                                @Html.RequiredTextFor(model => model.CallParties, new { @class = "ProxiSemiBold textChange inlineBlock" })
                                <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>This includes circumstances where one of these parties employs a call centre to call on its behalf.</span></a>
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallParties, "No", new { @id = "noCallParties", @class = "radioCheck" })
                                    @Html.Label("noCallParties", "No", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallParties, "Registered Charity", new { @id = "charity", @class = "radioCheck" })
                                    @Html.Label("charity", "Registered Charity", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallParties, "Government Body", new { @id = "government", @class = "radioCheck" })
                                    @Html.Label("government", "Government Body", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallParties, "Political party/independent member/candidate", new { @id = "political", @class = "radioCheck" })
                                    @Html.Label("political", "Political party or independent member or candidate", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallParties, "Educational institution", new { @id = "education", @class = "radioCheck" })
                                    @Html.Label("education", "Educational institution", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.CallParties, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.Consent)</legend>
                            <div class="labelDescMargin toolTipContainer">
                                @Html.RequiredTextFor(model => model.Consent, new { @class = "ProxiSemiBold textChange r10-inlineOnly" })
                                <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>Are you an existing or previous customer or subscriber of the company or have you made enquiries with the company that called you? If you have or had a business relationship with the company or have recently made enquiries, you may have given your consent to be contacted by the company and its affiliates.</span></a>
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.Consent, "Yes", new { @id = "withConsent", @class = "radioCheck", data_other_option_field = "withdrawnConsent" })
                                    @Html.Label("withConsent", "Yes", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.Consent, "No", new { @id = "noConsent", @class = "radioCheck" })
                                    @Html.Label("noConsent", "No", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.Consent, "Unsure", new { @id = "unsureConsent", @class = "radioCheck" })
                                    @Html.Label("unsureConsent", "Unsure", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Consent, "", new { @class = "error" })
                            </div>
                            <div class="labelDescMargin withdrawnConsent hidden toolTipContainer">
                                <p>If you have a business relationship with the company, it can amount to having given your permission to be contacted, even if your number is on the Do Not Call Register.</p>
                                <br />
                                <p>However, you are able to withdraw your permission at any time and the company will no longer be able to rely on your business relationship to make telemarketing calls to you. To withdraw your consent, you should directly contact the company and let them know that you do not want to receive any telemarketing calls from them. </p>
                                <br />
                                <p>If you continue to receive telemarketing calls after directly opting out, please let us know by lodging a complaint.</p>
                                <br />
                                <p>Even if the company has consent to call you, the call may still raise issues relating to the <a class="consumerGreenColor" target="_blank" href="https://www.donotcall.gov.au/consumers/consumer-overview/industry-standards/">Industry Standard</a>. If you would like to continue to lodge a complaint relating to the Industry Standard, you may do so if:</p>
                                <ul>
                                    <li>
                                        The call was made outside allowable times
                                        <a href="#" class="tooltip">
                                            <img src="/images/tooltip.png" alt="tip" />
                                            <span class="widerTooltip">
                                                <p>Callers are only able to call during the times set out below unless you have consented to being called at another time.</p>
                                                <br />
                                                <p>Telemarketing calls may only be made on:</p>
                                                <ul>
                                                    <li>weekdays between 9 am-8 pm</li>
                                                    <li>Saturdays between 9 am-5 pm</li>
                                                </ul>
                                                <br />
                                                <p>Research calls may only be made on:</p>
                                                <ul>
                                                    <li>weekdays between 9 am-8:30 pm</li>
                                                    <li>Saturdays between 9 am-5 pm</li>
                                                    <li>Sundays between 9 am-5 pm</li>
                                                </ul>
                                                <br />
                                                <p>No telemarketing or research calls are permitted to be made on National public holidays.</p>
                                            </span>
                                        </a>
                                    </li>
                                    <li>
                                        The caller failed to provide mandatory information
                                        <a href="#" class="tooltip">
                                            <img src="/images/tooltip.png" alt="tip" />
                                            <span class="widerTooltip">
                                                <p>Callers are required to give you certain information when they make a telemarketing call:</p>
                                                <br />
                                                <p>At the start of the call, the caller must:</p>
                                                <ul>
                                                    <li>provide their given name</li>
                                                    <li>identify the business they are calling from and the business who caused the call to be made</li>
                                                    <li>state the purpose of the call</li>
                                                </ul>
                                                <br />
                                                <p>On request, the caller must provide:</p>
                                                <ul>
                                                    <li>their business contact information</li>
                                                    <li>the contact details of the business who caused the call to be made</li>
                                                    <li>the name and contact details of the person responsible for inquiries and complaints</li>
                                                </ul>
                                            </span>
                                        </a>
                                    </li>
                                    <li>
                                        The caller did not enable calling line identification
                                        <a href="#" class="tooltip">
                                            <img src="/images/tooltip.png" alt="tip" />
                                            <span>
                                                <p>Callers must ensure that calling line identification (CLI) is displayed at the time they make a call and that this number is suitable for return contact (so that you can dial the number and obtain the name of the caller, who caused the call to be made and the purpose of the call).</p>
                                            </span>
                                        </a>
                                    </li>
                                    <li>
                                        The caller did not terminate the call upon request
                                        <a href="#" class="tooltip">
                                            <img src="/images/tooltip.png" alt="tip" />
                                            <span>
                                                <p>Callers must terminate a call in certain circumstances, including where you ask for the call to be terminated or otherwise indicate that you do not want the call to continue.</p>
                                            </span>
                                        </a>
                                    </li>
                                </ul>
                                <br />
                                <p>Please continue with this form if you would still like to lodge your complaint.</p>
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin withdrawnConsent hidden">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.WithdrawnConsent)</legend>
                            <div class="labelDescMargin toolTipContainer">
                                @Html.RequiredTextFor(model => model.WithdrawnConsent, new { @class = "ProxiSemiBold r10-inlineOnly" })
                                <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>Have you asked the company to stop calling during a previous telemarketing call, have you written to the company to ask it to stop calling you or have you opted out of receiving further calls by some other means? </span></a>
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.WithdrawnConsent, true, new { @id = "withdrawnConsent", @class = "radioCheck", data_other_option_field = "withdrawnConsentDetails" })
                                    @Html.Label("withdrawnConsent", "Yes", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.WithdrawnConsent, false, new { @id = "noWithdrawnConsent", @class = "radioCheck" })
                                    @Html.Label("noWithdrawnConsent", "No", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.WithdrawnConsent, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <div class="withdrawnConsentDetails hidden">
                        <div class="formField fieldMargin">
                            <div class="labelDescMargin">
                                @Html.RequiredLabelFor(model => model.DateConsentWithdrawn, new { @class = "ProxiSemiBold" })
                            </div>
                            <div>
                                @Html.TextBoxFor(model => model.DateConsentWithdrawn, new { @class = "short deny-html", type = "date" })
                                @Html.ValidationMessageFor(model => model.DateConsentWithdrawn, "", new { @class = "error" })
                            </div>
                            <div class="clear"></div>
                        </div>
                        <div class="formField fieldMargin">
                            <div class="labelDescMargin">
                                @Html.RequiredLabelFor(model => model.AdditionalWithdrawnConsent, new { @class = "ProxiSemiBold" })
                            </div>
                            <div>
                                @Html.TextAreaFor(model => model.AdditionalWithdrawnConsent, new { @class = "deny-html" })
                                @Html.ValidationMessageFor(model => model.AdditionalWithdrawnConsent, "", new { @class = "error" })
                            </div>
                            <div class="clear"></div>
                        </div>
                    </div>
                    <div class="formField fieldMargin">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.OnlineSurvey)</legend>
                            <div class="labelDescMargin toolTipContainer">
                                @Html.RequiredTextFor(model => model.OnlineSurvey, new { @class = "ProxiSemiBold r10-inlineOnly" })
                                <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>Online surveys and competitions commonly require you to accept terms and conditions that include you consenting to receive direct marketing from a business and its affiliates.</span></a>
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.OnlineSurvey, "Yes", new { @id = "filledOnlineSurvey", @class = "radioCheck", data_other_option_field = "onlineSurveyAddtionalDetails" })
                                    @Html.Label("filledOnlineSurvey", "Yes", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.OnlineSurvey, "No", new { @id = "notFilledOnlineSurvey", @class = "radioCheck" })
                                    @Html.Label("notFilledOnlineSurvey", "No", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.OnlineSurvey, "Unsure", new { @id = "notSureAboutOnlineSurvey", @class = "radioCheck" })
                                    @Html.Label("notSureAboutOnlineSurvey", "Unsure", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.OnlineSurvey, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin onlineSurveyAddtionalDetails hidden">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.OnlineSurveyAddtionalDetails, new { @class = "ProxiSemiBold" })
                        </div>
                        <div>
                            @Html.TextAreaFor(model => model.OnlineSurveyAddtionalDetails, new { @class = "deny-html" })                  
                        </div>
                        <div class="clear"></div>
                    </div>
                    <hr />
                    <div class="note">
                        <p class="textChange">You can add details of up to five calls to this complaint in the next step. Each call must relate to the same caller or business and the same receiving phone number. To lodge a complaint about a different caller or receiving phone number you will need to lodge a new complaint form. You will also have an opportunity to provide additional details about your complaint in the next step.</p>
                    </div>
                    <div>
                        <button class="ProxiBold next validate populatePurpose">NEXT</button>
                        <p class="failedMandatory hideOnMobile hidden">You have failed to complete a mandatory field</p>
                    </div>
                </div>
            </li>
            <li class="incident callIncident">
                <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
                    <span class="title">4. Call incident details</span>
                    <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
                </div>
                <div class="accordionContent">
                <div>
                    <p class="italic">All fields marked with * are mandatory</p>
                    <div class="errorContainer"></div>
                </div>
                <br />
                <input type="hidden" name="CallIncidents.Index" value="0">
                @Html.HiddenFor(model => model.CallIncidents[0].ComplainantNumber, new { @class = "parentComplainantNumber"})
                <!-- Call Summary block starts -->
                <div class="subHeader">
                    <p>Call Summary</p>
                </div>
                <div class="formField fieldMargin">
                    <div class="labelDescMargin">
                        @Html.RequiredLabelFor(model => model.CallIncidents[0].CallSummary, new { @class = "ProxiSemiBold" })
                    </div>
                    <div>
                        @Html.TextAreaFor(model => model.CallIncidents[0].CallSummary, new { @class = "deny-html" })
                        @Html.ValidationMessageFor(model => model.CallIncidents[0].CallSummary, "", new { @class = "error" })
                    </div>
                    <div class="clear"></div>
                </div>
                <!-- Call Summary block ends -->
                <div class="formField fieldMargin">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.CallIncidents[0].DateOfCall, new { @class = "inputLabel dateLabel" })
                    </div>
                    <div class="floatLeft dateOfCall">
                        @Html.TextBoxFor(model => model.CallIncidents[0].DateOfCall, new { @class = "short deny-html", type = "date" })
                        @Html.ValidationMessageFor(model => model.CallIncidents[0].DateOfCall, "", new { @class = "error" })
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin">
                    <div class="floatLeft">
                        @Html.RequiredLabelFor(model => model.CallIncidents[0].TimeOfCall, new { @class = "inputLabel" })
                    </div>
                    <div class="floatLeft">
                        <div class="selectParent selectShort">
                            @Html.TimePickerDropDownListFor(model => model.CallIncidents[0].TimeOfCall)
                        </div>
                        @Html.ValidationMessageFor(model => model.CallIncidents[0].TimeOfCall, "", new {@class = "error"})
                        <fieldset>
                            <legend>Select AM or PM</legend>
                            <div class="floatLeft radioButton">
                                @Html.RadioButtonFor(model => model.CallIncidents[0].CallAmPm, "AM", new {@id = "callAM0", @class = "radioCheck"})
                                @Html.Label("callAM0", "AM", new {@class = "radioCheckLabel"})
                            </div>
                            <div class="floatLeft radioButton">
                                @Html.RadioButtonFor(model => model.CallIncidents[0].CallAmPm, "PM", new {@id = "callPM0", @class = "radioCheck"})
                                @Html.Label("callPM0", "PM", new {@class = "radioCheckLabel"})
                            </div>
                            <div class="clear"></div>
                            @Html.ValidationMessageFor(model => model.CallIncidents[0].CallAmPm, "", new {@class = "error"})
                        </fieldset>
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin">
                    <div class="labelDescMargin">
                        @Html.RequiredLabelFor(model => model.CallIncidents[0].CallFromNumber, new { @class = "ProxiSemiBold" })
                    </div>
                    <div class="toolTipContainer">
                        @Html.TextBoxFor(model => model.CallIncidents[0].CallFromNumber, new { @class = "long callFromNumber hasTooltip deny-html", @type = "tel" })
                        <a href="#" class="tooltip afterField"><img src="/images/tooltip.png" alt="tip" /><span>This may be the number that displayed on your phone or the number that was provided to you during the call as the calling number</span></a>
                        @Html.ValidationMessageFor(model => model.CallIncidents[0].CallFromNumber, "", new { @class = "error" })
                    </div>
                    <div class="clear"></div>
                </div>
                <div class="formField fieldMargin">
                    <fieldset>
                        <legend>@Html.GetDisplayName(model => model.CallIncidents[0].CallDescription)</legend>
                        <div class="labelDescMargin">
                            @Html.RequiredTextFor(model => model.CallIncidents[0].CallDescription, new { @class = "ProxiSemiBold inlineBlock" })
                        </div>
                        <div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.CallIncidents[0].CallDescription, "You had a conversation with a real person", new { @id = "conversation0", @class = "radioCheck" })
                                @Html.Label("conversation0", "You had a conversation with a real person", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.CallIncidents[0].CallDescription, "The call was a recorded message or synthetic voice", new { @id = "recorded0", @class = "radioCheck" })
                                @Html.Label("recorded0", "The call was a recorded message or synthetic voice", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.CallIncidents[0].CallDescription, "The call went to the answering machine, and a message was left", new { @id = "answeringMachine0", @class = "radioCheck" })
                                @Html.Label("answeringMachine0", "The call went to the answering machine, and a message was left", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.CallIncidents[0].CallDescription, "Silence – when you took the call there was no response", new { @id = "silence0", @class = "radioCheck" })
                                @Html.Label("silence0", "Silence – when you took the call there was no response", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.CallIncidents[0].CallDescription, "You did not answer the call", new { @id = "didNotAnswer0", @class = "radioCheck" })
                                @Html.Label("didNotAnswer0", "You did not answer the call", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="radio-holder">
                                @Html.RadioButtonFor(model => model.CallIncidents[0].CallDescription, "Other", new { @id = "otherCallDescription0", @class = "radioCheck", data_other_option_field = "otherCallDescription" })
                                @Html.Label("otherCallDescription0", "Other", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="formField otherCallDescription hidden">
                                <div class="labelDescMargin">
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].OtherCallDescription, new { @class = "ProxiSemiBold" })
                                </div>
                                <div>
                                    @Html.TextAreaFor(model => model.CallIncidents[0].OtherCallDescription, new { @class = "deny-html" })
                                    @Html.ValidationMessageFor(model => model.CallIncidents[0].OtherCallDescription, "", new { @class = "error" })
                                </div>
                                <div class="clear"></div>
                            </div>
                            @Html.ValidationMessageFor(model => model.CallIncidents[0].CallDescription, "", new { @class = "error" })
                        </div>
                    </fieldset>
                    <div class="clear"></div>
                </div>
                    <div class="formField fieldMargin checkboxgroup">
                        @Html.HiddenFor(model => model.CallIncidents[0].MinimumCallPurpose, new { @class = "minimumCallPurpose" })
                        <div class="labelDescMargin">
                            <p class="ProxiSemiBold inlineBlock">How would you describe the purpose of the call (you may select multiple purposes)?</p>
                        </div>
                        <div class="callPurpose">
                            <fieldset>
                                <legend>How would you describe the purpose of the call (you may select multiple purposes)?</legend>
                                <div class="radio-holder">
                                    @Html.CheckBoxFor(model => model.CallIncidents[0].CallPurposeAdvertise, new { @class = "radioCheck required-checkbox", data_checkbox_subfield = "isCallerGoods" })
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].CallPurposeAdvertise, new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder subCheckbox isCallerGoods hidden">
                                    @Html.CheckBoxFor(model => model.CallIncidents[0].CallPurposeCaller, new { @class = "radioCheck required-checkbox" })
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].CallPurposeCaller, new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.CheckBoxFor(model => model.CallIncidents[0].CallPurposeDonation, new { @class = "radioCheck required-checkbox", data_checkbox_subfield = "isPolitical" })
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].CallPurposeDonation, new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder subCheckbox isPolitical hidden">
                                    @Html.CheckBoxFor(model => model.CallIncidents[0].CallPurposeDonationForPolitics, new { @class = "radioCheck required-checkbox" })
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].CallPurposeDonationForPolitics, new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.CheckBoxFor(model => model.CallIncidents[0].CallPurposePoll, new { @class = "radioCheck required-checkbox" })
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].CallPurposePoll, new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.CheckBoxFor(model => model.CallIncidents[0].CallPurposeElection, new { @class = "radioCheck required-checkbox" })
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].CallPurposeElection, new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.CheckBoxFor(model => model.CallIncidents[0].CallPurposeScam, new { @class = "radioCheck required-checkbox" })
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].CallPurposeScam, new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.CheckBoxFor(model => model.CallIncidents[0].CallPurposeOther, new { @class = "radioCheck required-checkbox", data_checkbox_subfield = "otherPurpose" })
                                    @Html.RequiredLabelFor(model => model.CallIncidents[0].CallPurposeOther, new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.CallIncidents[0].MinimumCallPurpose, "", new { @class = "error" })
                                <div class="formField otherPurpose hidden">
                                    <div class="labelDescMargin">
                                        @Html.RequiredLabelFor(model => model.CallIncidents[0].OtherPurpose, new { @class = "ProxiSemiBold" })
                                    </div>
                                    <div>
                                        @Html.TextAreaFor(model => model.CallIncidents[0].OtherPurpose, new { @class = "deny-html" })
                                        @Html.ValidationMessageFor(model => model.CallIncidents[0].OtherPurpose, "", new { @class = "error" })
                                    </div>
                                    <div class="clear"></div>
                                </div>
                                <div class="clear"></div>
                            </fieldset>
                        </div>
                    </div>
                    <hr/>
                    <div class="fieldMargin">
                        <p>The following questions are used to identify potential breaches of the Telemarketing and Research Industry Standard. The rules in the industry standard apply to all calls made by telemarketers regardless of whether the numbers being called are on the Do Not Call Register or not. If you just want to make a complaint about a call made to a number on the Do Not Call Register you can skip this section and move to the next step.</p>
                    </div>
                    <div class="formField fieldMargin">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.CallIncidents[0].AskedCallEnded)</legend>
                            <div class="labelDescMargin">
                                @Html.RequiredTextFor(model => model.CallIncidents[0].AskedCallEnded, new { @class = "ProxiSemiBold inlineBlock" })
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].AskedCallEnded, true, new { @id = "askedCallEnded0", @class = "radioCheck", data_other_option_field = "wasCallEnded" })
                                    @Html.Label("askedCallEnded0", "Yes", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].AskedCallEnded, false, new { @id = "notAskedCallEnded0", @class = "radioCheck" })
                                    @Html.Label("notAskedCallEnded0", "No", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.CallIncidents[0].AskedCallEnded, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <!-- New block starts -->
                    <div class="formField fieldMargin wasCallEnded hidden">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.CallIncidents[0].AnswerForCallTermination, new { @class = "ProxiSemiBold" })
                        </div>
                        <div>
                            @Html.TextAreaFor(model => model.CallIncidents[0].AnswerForCallTermination, new { @class = "deny-html" })
                            @Html.ValidationMessageFor(model => model.CallIncidents[0].AnswerForCallTermination, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>       
                    </div>
                    <!-- New block ends -->
                    <div class="formField fieldMargin wasCallEnded hidden">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.CallIncidents[0].WasCallEnded)</legend>
                            <div class="labelDescMargin toolTipContainer">
                                @Html.RequiredTextFor(model => model.CallIncidents[0].WasCallEnded, new { @class = "ProxiSemiBold inlineBlock" })
                                <a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>While the caller may say goodbye or thank you for your time, they should not continue to 'market' any product, service, etc.</span></a>
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].WasCallEnded, true, new { @id = "callEnded0", @class = "radioCheck" })
                                    @Html.Label("callEnded0", "Yes", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].WasCallEnded, false, new { @id = "callNotEnded0", @class = "radioCheck" })
                                    @Html.Label("callNotEnded0", "No", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.CallIncidents[0].WasCallEnded, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.CallIncidents[0].HasCallerId)</legend>
                            <div class="labelDescMargin">
                                @Html.RequiredTextFor(model => model.CallIncidents[0].HasCallerId, new { @class = "ProxiSemiBold inlineBlock" })
                            </div>
                            <div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].HasCallerId, "Phone does not display Caller ID", new { @id = "phoneNotDisplay0", @class = "radioCheck" })
                                    @Html.Label("phoneNotDisplay0", "Phone does not display Caller ID", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].HasCallerId, "Yes", new { @id = "hasCallerId0", @class = "radioCheck", data_other_option_field = "callerIdDetails" })
                                    @Html.Label("hasCallerId0", "Yes", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].HasCallerId, "Yes, but did not write it down", new { @id = "yesNotWritten0", @class = "radioCheck" })
                                    @Html.Label("yesNotWritten0", "Yes, but did not write it down", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].HasCallerId, "No", new { @id = "noCallerId0", @class = "radioCheck" })
                                    @Html.Label("noCallerId0", "No", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="radio-holder">
                                    @Html.RadioButtonFor(model => model.CallIncidents[0].HasCallerId, "Did not notice", new { @id = "didNotNotice0", @class = "radioCheck" })
                                    @Html.Label("didNotNotice0", "Did not notice", new { @class = "radioCheckLabel" })
                                </div>
                                @Html.ValidationMessageFor(model => model.CallIncidents[0].HasCallerId, "", new { @class = "error" })
                            </div>
                        </fieldset>
                        <div class="clear"></div>
                    </div>
                    <div class="callerIdDetails hidden">
                        <div class="formField fieldMargin">
                            <div class="labelDescMargin">
                                @Html.RequiredLabelFor(model => model.CallIncidents[0].CallerIdNumber, new { @class = "ProxiSemiBold" })
                            </div>
                            <div>
                                @Html.TextBoxFor(model => model.CallIncidents[0].CallerIdNumber, new { @class = "long floatLeft deny-html" })
                                <button class="ProxiBold asAbove floatLeft hideDisabled">As above</button>
                            </div>
                            <div class="clear"></div>
                            <div>
                                @Html.ValidationMessageFor(model => model.CallIncidents[0].CallerIdNumber, "", new { @class = "error" })
                            </div>
                            <div class="clear"></div>
                        </div>
                        <div class="formField fieldMargin">
                            <fieldset>
                                <legend>@Html.GetDisplayName(model => model.CallIncidents[0].CallerIdContactable)</legend>
                                <div class="labelDescMargin">
                                    @Html.RequiredTextFor(model => model.CallIncidents[0].CallerIdContactable, new { @class = "ProxiSemiBold inlineBlock" })
                                </div>
                                <div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallIncidents[0].CallerIdContactable, "Didn't try", new { @id = "notTry0", @class = "radioCheck" })
                                        @Html.Label("notTry0", "I didn't try to contact the number displayed during the call", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallIncidents[0].CallerIdContactable, "Made contact", new { @id = "madeContact0", @class = "radioCheck" })                            
                                        <label class="radioCheckLabel" for="madeContact0">I did, and the number connected to a person or recorded message that <u>did not</u> give me the name of the business that called</label>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallIncidents[0].CallerIdContactable, "Could not contact", new { @id = "couldNotContact0", @class = "radioCheck" })                                      
                                        <label class="radioCheckLabel" for="couldNotContact0">I did, and the number was not in service or disconnected <i>or was not answered</i></label>
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallIncidents[0].CallerIdContactable, "Left a message", new { @id = "leftAMessage0", @class = "radioCheck" })
                                        @Html.Label("leftAMessage0", "I did, and the number connected to an unidentified voicemail or phone queue", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallIncidents[0].CallerIdContactable, "Got some information about the caller", new { @id = "infoAboutCaller0", @class = "radioCheck" })
                                        @Html.Label("infoAboutCaller0", "I did, and the number connected to a person or recorded message that gave me the name of the business that called", new { @class = "radioCheckLabel" })
                                    </div>
                                    <div class="radio-holder">
                                        @Html.RadioButtonFor(model => model.CallIncidents[0].CallerIdContactable, "Other", new { @id = "callerIdContactableOther0", @class = "radioCheck", data_other_option_field = "callerIdContactableOther" })
                                        @Html.Label("callerIdContactableOther0", "Other", new { @class = "radioCheckLabel" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.CallIncidents[0].CallerIdContactable, "", new { @class = "error" })
                                    <div class="formField callerIdContactableOther hidden">
                                        <div class="labelDescMargin">
                                            @Html.RequiredLabelFor(model => model.CallIncidents[0].CallerIdContactableOther, new { @class = "ProxiSemiBold" })
                                        </div>
                                        <div>
                                            @Html.TextAreaFor(model => model.CallIncidents[0].CallerIdContactableOther, new { @class = "deny-html" })
                                            @Html.ValidationMessageFor(model => model.CallIncidents[0].CallerIdContactableOther, "", new { @class = "error" })
                                        </div>
                                        <div class="clear"></div>
                                    </div>
                                </div>
                            </fieldset>
                            <div class="clear"></div>
                        </div>
                    </div>
                    <div class="fieldMargin toolTipContainer hideDisabled">
                        <button class="ProxiBold addCallIncident">Add another incident</button>
                        <a href="#" class="tooltip addCallIncident"><img src="/images/tooltip.png" alt="tip" /><span>This will allow you to add another call from the same business to the same receiving phone number. If you do not wish to add another call, please hit next to continue with your complaint.</span></a>
                    </div>
                    <hr/>
                    <div>
                        <button class="ProxiBold next validate populateCallSummaries">NEXT</button>
                        <p class="failedMandatory hideOnMobile hidden">You have failed to complete a mandatory field</p>
                    </div>
                </div>
            </li>
            <li class="incident faxIncident hidden">
                <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
                    <span class="title">3. Fax incident details</span>
                    <span class="floatRight editButton"><a href="#" class="ProxiBold"><span class="icon arrowLeft"></span> EDIT</a></span>
                </div>
                <div class="accordionContent">
                    <div>
                        <p class="italic">All fields marked with * are mandatory</p>
                        <div class="errorContainer"></div>
                    </div>
                    <br />
                    <input type="hidden" name="FaxIncidents.Index" value="0">
                    <!-- Fax Summary block starts -->
                    <div class="subHeader">
                        <p>Fax Summary</p>
                    </div>
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.FaxIncidents[0].FaxSummary, new { @class = "ProxiSemiBold" })
                        </div>
                        <div>
                            @Html.TextAreaFor(model => model.FaxIncidents[0].FaxSummary, new { @class = "deny-html" })
                            @Html.ValidationMessageFor(model => model.FaxIncidents[0].FaxSummary, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                    <!-- Fax Summary block ends -->
                    <div class="formField fieldMargin">
                        <div class="floatLeft">
                            @Html.RequiredLabelFor(model => model.FaxIncidents[0].DateOfFax, new { @class = "inputLabel dateLabel" })
                        </div>
                        <div class="floatLeft">
                            @Html.TextBoxFor(model => model.FaxIncidents[0].DateOfFax, new { @class = "short deny-html", type = "date" })
                            @Html.ValidationMessageFor(model => model.FaxIncidents[0].DateOfFax, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <div class="floatLeft">
                            @Html.RequiredLabelFor(model => model.FaxIncidents[0].TimeOfFax, new { @class = "inputLabel" })
                        </div>
                        <div class="floatLeft">
                            <div class="selectParent selectShort">
                                @Html.TimePickerDropDownListFor(model => model.FaxIncidents[0].TimeOfFax)
                            </div>
                            @Html.ValidationMessageFor(model => model.FaxIncidents[0].TimeOfFax, "", new { @class = "error" })
                            <fieldset>
                                <legend>Select AM or PM</legend>
                                <div class="floatLeft radioButton">
                                    @Html.RadioButtonFor(model => model.FaxIncidents[0].FaxAmPm, "AM", new { @id = "faxAM0", @class = "radioCheck" })
                                    @Html.Label("faxAM0", "AM", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="floatLeft radioButton">
                                    @Html.RadioButtonFor(model => model.FaxIncidents[0].FaxAmPm, "PM", new { @id = "faxPM0", @class = "radioCheck" })
                                    @Html.Label("faxPM0", "PM", new { @class = "radioCheckLabel" })
                                </div>
                                <div class="clear"></div>
                                @Html.ValidationMessageFor(model => model.FaxIncidents[0].FaxAmPm, "", new { @class = "error" })
                            </fieldset>
                        </div>
                        <div class="clear"></div>
                    </div>                    
                    <div class="formField fieldMargin">
                        <div class="labelDescMargin">
                            @Html.RequiredLabelFor(model => model.FaxIncidents[0].FaxFileUpload, new { @class = "ProxiSemiBold" })
                        </div>
                        <div>
                            @Html.TextBoxFor(model => model.FaxIncidents[0].FaxFileUpload, new { type = "file" })
                            @Html.ValidationMessageFor(model => model.FaxIncidents[0].FaxFileUpload, "", new { @class = "error" })
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="formField fieldMargin">
                        <p>To consider your complaint we need a copy of the fax you received. A scanned copy of the fax can be attached above, or the fax can be:</p>
                        <ul>
                            <li>emailed to <a class="consumerGreenShade1Color" href="mailto:enquiries@donotcall.gov.au">enquiries@donotcall.gov.au</a></li>
                            <li>posted to PO Box 13206 Law Courts VIC 8010</li>
                            <li>faxed to 1300 793 514</li>
                        </ul>
                        <p>If you use one of these alternative methods, please include the reference number that you will receive when you have submitted your complaint.</p>
                    </div>
                    <div class="fieldMargin toolTipContainer hideDisabled">
                        <button class="ProxiBold addFaxIncident">Add another incident</button>
                        <a href="#" class="tooltip addFaxIncident"><img src="/images/tooltip.png" alt="tip" /><span>This will allow you to add another fax from the same business to the same receiving phone number. If you do not wish to add another fax, please hit next to continue with your complaint.</span></a>
                    </div>
                    <hr />
                    <div>
                        <button class="ProxiBold next validate populateFaxSummaries">NEXT</button>
                        <p class="failedMandatory hideOnMobile hidden">You have failed to complete a mandatory field</p>
                    </div>
                </div>
            </li>
            <li class="incident other">
                <div class="accordionHeader ProxiBold ui-accordion-header-border-top">
                    <span class="title">5. Confirm and submit</span>
                </div>
                <div class="accordionContent">
                    <div>
                        <p class="italic">All fields marked with * are mandatory</p>
                        <div class="errorContainer"></div>
                    </div>
                    <br />
                    <div class="labelDescMargin subHeader">
                        <p>Declarations</p>
                    </div>
                    <div class="labelDescMargin">
                        <p>We would like to get your consent so we can use the information you provide to consider your complaint further</p>
                    </div>
                    <div class="formField fieldMargin groupField">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.AgreeTelephoneService)</legend>
                            <div class="toolTipContainer">
                                @Html.RequiredTextFor(model => model.AgreeTelephoneService, new { @class = "r10-inlineOnly declarationTextPosition" })
                                <a href="#" class="tooltip declarationToolTip"><img src="/images/tooltip.png" alt="tip" /><span>Inbound calling records can provide key information such as the number that called, and the time a call was received. This information may be used to inform that ACMA’s compliance and enforcement activities.</span></a>
                            </div>
                            <div class="clear"></div>

                            <div class="floatLeft radioButton">
                                @Html.RadioButtonFor(model => model.AgreeTelephoneService, true, new { @id = "telephoneService", @class = "radioCheck" })
                                @Html.Label("telephoneService", "Yes", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="floatLeft radioButton">
                                @Html.RadioButtonFor(model => model.AgreeTelephoneService, false, new { @id = "noTelephoneService", @class = "radioCheck" })
                                @Html.Label("noTelephoneService", "No", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="clear"></div>
                            @Html.ValidationMessageFor(model => model.AgreeTelephoneService, "", new { @class = "error" })
                        </fieldset>
                    </div>                                         
                    <div class="formField fieldMargin groupField">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.AgreePassedToBusiness)</legend>
                            <div class="toolTipContainer">
                                @Html.RequiredTextFor(model => model.AgreePassedToBusiness, new { @class = "r10-inlineOnly declarationTextPosition" })
                                <a href="#" class="tooltip declarationToolTip"><img src="/images/tooltip.png" alt="tip" /><span>The number that was called is key information for a business when reviewing its telemarketing practices. It also gives the business the opportunity to opt out your number from future campaigns.</span></a>                            
                            </div>
                            <div class="clear"></div>

                            <div class="floatLeft radioButton">
                                @Html.RadioButtonFor(model => model.AgreePassedToBusiness, true, new { @id = "passedToBusiness", @class = "radioCheck" })
                                @Html.Label("passedToBusiness", "Yes", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="floatLeft radioButton">
                                @Html.RadioButtonFor(model => model.AgreePassedToBusiness, false, new { @id = "noPassedToBusiness", @class = "radioCheck" })
                                @Html.Label("noPassedToBusiness", "No", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="clear"></div>
                            @Html.ValidationMessageFor(model => model.AgreePassedToBusiness, "", new { @class = "error" })
                        </fieldset>
                    </div>                   
                    <div class="formField fieldMargin groupField">
                        <fieldset>
                            <legend>@Html.GetDisplayName(model => model.AgreeReferred)</legend>
                            <div class="toolTipContainer">
                                @Html.RequiredTextFor(model => model.AgreeReferred, new { @class = "r10-inlineOnly declarationTextPosition" })
                                <a href="#" class="tooltip declarationToolTip"><img src="/images/tooltip.png" alt="tip" /><span>The ACMA may liaise with its international counterparts (such as the FTC in America) and related Australian Government agencies (such as the ACCC) about telemarketing trends impacting consumers globally. If answered ‘yes’ the ACMA may provide these agencies with information from this complaint such as the description of the call. Please note, personal information such as name or address information will not be shared.</span></a>
                            </div>
                            <div class="clear"></div>

                            <div class="floatLeft radioButton">
                                @Html.RadioButtonFor(model => model.AgreeReferred, true, new { @id = "referred", @class = "radioCheck" })
                                @Html.Label("referred", "Yes", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="floatLeft radioButton">
                                @Html.RadioButtonFor(model => model.AgreeReferred, false, new { @id = "noReferred", @class = "radioCheck" })
                                @Html.Label("noReferred", "No", new { @class = "radioCheckLabel" })
                            </div>
                            <div class="clear"></div>
                            @Html.ValidationMessageFor(model => model.AgreeReferred, "", new { @class = "error" })
                        </fieldset>
                    </div>
                    @if (ViewBag.Recaptcha)
                    {
                        <hr/>
                        <div class="subHeader">
                            <p>Security code</p>
                        </div>
                        <div class="labelDescMargin toolTipContainer">
                            <p>
                                This helps with the security of the register.<a href="#" class="tooltip"><img src="/images/tooltip.png" alt="tip" /><span>Security requirements ensure the site is not being accessed by non-humans.</span></a>
                            </p>
                        </div>
                        <div class="g-recaptcha" data-sitekey="@ViewBag.Sitekey" data-callback="recaptchaVerified"></div>
                        <span class="error recaptchaerror hidden">Please verify that you are not a robot</span>
                    }
                    else
                    {
                        <label for="alternative-email" class="alternative-email">Alternative Email</label>
                        @Html.TextBox("alternative-email", "Security check, do not replace this value", new { @class = "alternative-email" })
                    }
                    <hr/>
                    <div class="note">
                        <p>
                            The Privacy Act 1988 (Cth) imposes obligations on the ACMA and the register operator in relation to the collection, security, quality, access, use and disclosure of personal information. These obligations are detailed in the <a class="consumerGreenColor" href="@ViewBag.AustralianPrivacyUrl" target="_blank">Australian Privacy Principles</a>. For more information about the collection of data in this form, please see the Do Not Call Register <a class="consumerGreenColor" href="@ViewBag.DataCollectionNode" target="_blank">data collection notice</a>.
                        </p>
                    </div>
                    <div>
                        <button class="ProxiBold submit checkRecaptcha">SUBMIT COMPLAINT</button>
                        <p class="failedMandatory submitMargin hideOnMobile hidden">You have failed to complete a mandatory field</p>
                    </div>
                </div>
            </li>
        </ul>
    }
</div>